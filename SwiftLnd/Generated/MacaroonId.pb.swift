// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: rpc.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct MacaroonId {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var nonce: Data = SwiftProtobuf.Internal.emptyData

    var storageID: Data = SwiftProtobuf.Internal.emptyData

    var ops: [Op] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Op {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var entity: String = String()

    var actions: [String] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension MacaroonId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "MacaroonId"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "nonce"),
        2: .same(proto: "storageId"),
        3: .same(proto: "ops")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularBytesField(value: &self.nonce)
            case 2: try decoder.decodeSingularBytesField(value: &self.storageID)
            case 3: try decoder.decodeRepeatedMessageField(value: &self.ops)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.nonce.isEmpty {
            try visitor.visitSingularBytesField(value: self.nonce, fieldNumber: 1)
        }
        if !self.storageID.isEmpty {
            try visitor.visitSingularBytesField(value: self.storageID, fieldNumber: 2)
        }
        if !self.ops.isEmpty {
            try visitor.visitRepeatedMessageField(value: self.ops, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    func _protobuf_generated_isEqualTo(other: MacaroonId) -> Bool {
        if self.nonce != other.nonce { return false }
        if self.storageID != other.storageID { return false }
        if self.ops != other.ops { return false }
        if unknownFields != other.unknownFields { return false }
        return true
    }
}

extension Op: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "Op"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "entity"),
        2: .same(proto: "actions")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &self.entity)
            case 2: try decoder.decodeRepeatedStringField(value: &self.actions)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.entity.isEmpty {
            try visitor.visitSingularStringField(value: self.entity, fieldNumber: 1)
        }
        if !self.actions.isEmpty {
            try visitor.visitRepeatedStringField(value: self.actions, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    func _protobuf_generated_isEqualTo(other: Op) -> Bool {
        if self.entity != other.entity { return false }
        if self.actions != other.actions { return false }
        if unknownFields != other.unknownFields { return false }
        return true
    }
}
