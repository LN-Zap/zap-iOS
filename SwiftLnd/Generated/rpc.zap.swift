//
// DO NOT EDIT.
//
// Generated by `protoc-gen-zap`.
// Source: rpc.proto
//

import Lndmobile
import Logger
import SwiftGRPC
import SwiftProtobuf

private final class LndCallback<T: SwiftProtobuf.Message>: NSObject, LndmobileCallbackProtocol, LndmobileRecvStreamProtocol {
    private let completion: (Result<T, LndApiError>) -> Void
    
    init(_ completion: @escaping (Result<T, LndApiError>) -> Void) {
        self.completion = completion
    }
    
    func onError(_ error: Error) {
        Logger.error(error)
        completion(.failure(LndApiError.localizedError(error.localizedDescription)))
    }
    
    func onResponse(_ data: Data) {
        if let result = try? T(serializedData: data) {
            completion(.success(result))
        } else {
            onError(LndApiError.unknownError)
        }
    }
}

private func handleStreamResult<T>(_ result: ResultOrRPCError<T?>, completion: @escaping ApiCompletion<T>) throws {
    switch result {
    case .result(let value):
        guard let value = value else { return }
        completion(.success(value))
    case .error(let error):
        throw error
    }
}

private func createHandler<T>(_ completion: @escaping ApiCompletion<T>) -> (T?, CallResult) -> Void {
    return { (response: T?, callResult: CallResult) in
        if let response = response {
            completion(.success(response))
        } else {
            let error = LndApiError(callResult: callResult)
            Logger.error(error)
            completion(.failure(error))
        }
    }
}

private extension Result {
    init(value: Success?, error: Failure) {
        if let value = value {
            self = .success(value)
        } else {
            self = .failure(error)
        }
    }
}

protocol WalletUnlockerConnection {
    func genSeed(_ request: Lnrpc_GenSeedRequest, completion: @escaping ApiCompletion<Lnrpc_GenSeedResponse>)
    func initWallet(_ request: Lnrpc_InitWalletRequest, completion: @escaping ApiCompletion<Lnrpc_InitWalletResponse>)
    func unlockWallet(_ request: Lnrpc_UnlockWalletRequest, completion: @escaping ApiCompletion<Lnrpc_UnlockWalletResponse>)
    func changePassword(_ request: Lnrpc_ChangePasswordRequest, completion: @escaping ApiCompletion<Lnrpc_ChangePasswordResponse>)
}

class StreamingWalletUnlockerConnection: WalletUnlockerConnection {
    func genSeed(_ request: Lnrpc_GenSeedRequest, completion: @escaping ApiCompletion<Lnrpc_GenSeedResponse>) {
        LndmobileGenSeed(try? request.serializedData(), LndCallback(completion))
    }
    func initWallet(_ request: Lnrpc_InitWalletRequest, completion: @escaping ApiCompletion<Lnrpc_InitWalletResponse>) {
        LndmobileInitWallet(try? request.serializedData(), LndCallback(completion))
    }
    func unlockWallet(_ request: Lnrpc_UnlockWalletRequest, completion: @escaping ApiCompletion<Lnrpc_UnlockWalletResponse>) {
        LndmobileUnlockWallet(try? request.serializedData(), LndCallback(completion))
    }
    func changePassword(_ request: Lnrpc_ChangePasswordRequest, completion: @escaping ApiCompletion<Lnrpc_ChangePasswordResponse>) {
        LndmobileChangePassword(try? request.serializedData(), LndCallback(completion))
    }
}

final class RPCWalletUnlockerConnection: WalletUnlockerConnection {
    let service: Lnrpc_WalletUnlockerService
    
    public init(configuration: RPCCredentials) {
        service = Lnrpc_WalletUnlockerServiceClient(configuration: configuration)
    }
    
    func genSeed(_ request: Lnrpc_GenSeedRequest, completion: @escaping ApiCompletion<Lnrpc_GenSeedResponse>) {
        _ = try? service.genSeed(request, completion: createHandler(completion))
    }
    
    func initWallet(_ request: Lnrpc_InitWalletRequest, completion: @escaping ApiCompletion<Lnrpc_InitWalletResponse>) {
        _ = try? service.initWallet(request, completion: createHandler(completion))
    }
    
    func unlockWallet(_ request: Lnrpc_UnlockWalletRequest, completion: @escaping ApiCompletion<Lnrpc_UnlockWalletResponse>) {
        _ = try? service.unlockWallet(request, completion: createHandler(completion))
    }
    
    func changePassword(_ request: Lnrpc_ChangePasswordRequest, completion: @escaping ApiCompletion<Lnrpc_ChangePasswordResponse>) {
        _ = try? service.changePassword(request, completion: createHandler(completion))
    }
    
}

class MockWalletUnlockerConnection: WalletUnlockerConnection {
    private let genSeed: Lnrpc_GenSeedResponse?
    private let initWallet: Lnrpc_InitWalletResponse?
    private let unlockWallet: Lnrpc_UnlockWalletResponse?
    private let changePassword: Lnrpc_ChangePasswordResponse?
    
    init(
        genSeed: Lnrpc_GenSeedResponse? = nil,
        initWallet: Lnrpc_InitWalletResponse? = nil,
        unlockWallet: Lnrpc_UnlockWalletResponse? = nil,
        changePassword: Lnrpc_ChangePasswordResponse? = nil
        ) {
        self.genSeed = genSeed
        self.initWallet = initWallet
        self.unlockWallet = unlockWallet
        self.changePassword = changePassword
    }
    func genSeed(_ request: Lnrpc_GenSeedRequest, completion: @escaping ApiCompletion<Lnrpc_GenSeedResponse>) {
        completion(Result(value: genSeed, error: LndApiError.unknownError))
    }
    func initWallet(_ request: Lnrpc_InitWalletRequest, completion: @escaping ApiCompletion<Lnrpc_InitWalletResponse>) {
        completion(Result(value: initWallet, error: LndApiError.unknownError))
    }
    func unlockWallet(_ request: Lnrpc_UnlockWalletRequest, completion: @escaping ApiCompletion<Lnrpc_UnlockWalletResponse>) {
        completion(Result(value: unlockWallet, error: LndApiError.unknownError))
    }
    func changePassword(_ request: Lnrpc_ChangePasswordRequest, completion: @escaping ApiCompletion<Lnrpc_ChangePasswordResponse>) {
        completion(Result(value: changePassword, error: LndApiError.unknownError))
    }
}

protocol LightningConnection {
    func walletBalance(_ request: Lnrpc_WalletBalanceRequest, completion: @escaping ApiCompletion<Lnrpc_WalletBalanceResponse>)
    func channelBalance(_ request: Lnrpc_ChannelBalanceRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelBalanceResponse>)
    func getTransactions(_ request: Lnrpc_GetTransactionsRequest, completion: @escaping ApiCompletion<Lnrpc_TransactionDetails>)
    func estimateFee(_ request: Lnrpc_EstimateFeeRequest, completion: @escaping ApiCompletion<Lnrpc_EstimateFeeResponse>)
    func sendCoins(_ request: Lnrpc_SendCoinsRequest, completion: @escaping ApiCompletion<Lnrpc_SendCoinsResponse>)
    func listUnspent(_ request: Lnrpc_ListUnspentRequest, completion: @escaping ApiCompletion<Lnrpc_ListUnspentResponse>)
    func subscribeTransactions(_ request: Lnrpc_GetTransactionsRequest, completion: @escaping ApiCompletion<Lnrpc_Transaction>)
    func sendMany(_ request: Lnrpc_SendManyRequest, completion: @escaping ApiCompletion<Lnrpc_SendManyResponse>)
    func newAddress(_ request: Lnrpc_NewAddressRequest, completion: @escaping ApiCompletion<Lnrpc_NewAddressResponse>)
    func signMessage(_ request: Lnrpc_SignMessageRequest, completion: @escaping ApiCompletion<Lnrpc_SignMessageResponse>)
    func verifyMessage(_ request: Lnrpc_VerifyMessageRequest, completion: @escaping ApiCompletion<Lnrpc_VerifyMessageResponse>)
    func connectPeer(_ request: Lnrpc_ConnectPeerRequest, completion: @escaping ApiCompletion<Lnrpc_ConnectPeerResponse>)
    func disconnectPeer(_ request: Lnrpc_DisconnectPeerRequest, completion: @escaping ApiCompletion<Lnrpc_DisconnectPeerResponse>)
    func listPeers(_ request: Lnrpc_ListPeersRequest, completion: @escaping ApiCompletion<Lnrpc_ListPeersResponse>)
    func getInfo(_ request: Lnrpc_GetInfoRequest, completion: @escaping ApiCompletion<Lnrpc_GetInfoResponse>)
    func pendingChannels(_ request: Lnrpc_PendingChannelsRequest, completion: @escaping ApiCompletion<Lnrpc_PendingChannelsResponse>)
    func listChannels(_ request: Lnrpc_ListChannelsRequest, completion: @escaping ApiCompletion<Lnrpc_ListChannelsResponse>)
    func subscribeChannelEvents(_ request: Lnrpc_ChannelEventSubscription, completion: @escaping ApiCompletion<Lnrpc_ChannelEventUpdate>)
    func closedChannels(_ request: Lnrpc_ClosedChannelsRequest, completion: @escaping ApiCompletion<Lnrpc_ClosedChannelsResponse>)
    func openChannelSync(_ request: Lnrpc_OpenChannelRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelPoint>)
    func openChannel(_ request: Lnrpc_OpenChannelRequest, completion: @escaping ApiCompletion<Lnrpc_OpenStatusUpdate>)
    func closeChannel(_ request: Lnrpc_CloseChannelRequest, completion: @escaping ApiCompletion<Lnrpc_CloseStatusUpdate>)
    func abandonChannel(_ request: Lnrpc_AbandonChannelRequest, completion: @escaping ApiCompletion<Lnrpc_AbandonChannelResponse>)
    // skipped: sendPayment
    func sendPaymentSync(_ request: Lnrpc_SendRequest, completion: @escaping ApiCompletion<Lnrpc_SendResponse>)
    // skipped: sendToRoute
    func sendToRouteSync(_ request: Lnrpc_SendToRouteRequest, completion: @escaping ApiCompletion<Lnrpc_SendResponse>)
    func addInvoice(_ request: Lnrpc_Invoice, completion: @escaping ApiCompletion<Lnrpc_AddInvoiceResponse>)
    func listInvoices(_ request: Lnrpc_ListInvoiceRequest, completion: @escaping ApiCompletion<Lnrpc_ListInvoiceResponse>)
    func lookupInvoice(_ request: Lnrpc_PaymentHash, completion: @escaping ApiCompletion<Lnrpc_Invoice>)
    func subscribeInvoices(_ request: Lnrpc_InvoiceSubscription, completion: @escaping ApiCompletion<Lnrpc_Invoice>)
    func decodePayReq(_ request: Lnrpc_PayReqString, completion: @escaping ApiCompletion<Lnrpc_PayReq>)
    func listPayments(_ request: Lnrpc_ListPaymentsRequest, completion: @escaping ApiCompletion<Lnrpc_ListPaymentsResponse>)
    func deleteAllPayments(_ request: Lnrpc_DeleteAllPaymentsRequest, completion: @escaping ApiCompletion<Lnrpc_DeleteAllPaymentsResponse>)
    func describeGraph(_ request: Lnrpc_ChannelGraphRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelGraph>)
    func getChanInfo(_ request: Lnrpc_ChanInfoRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelEdge>)
    func getNodeInfo(_ request: Lnrpc_NodeInfoRequest, completion: @escaping ApiCompletion<Lnrpc_NodeInfo>)
    func queryRoutes(_ request: Lnrpc_QueryRoutesRequest, completion: @escaping ApiCompletion<Lnrpc_QueryRoutesResponse>)
    func getNetworkInfo(_ request: Lnrpc_NetworkInfoRequest, completion: @escaping ApiCompletion<Lnrpc_NetworkInfo>)
    func stopDaemon(_ request: Lnrpc_StopRequest, completion: @escaping ApiCompletion<Lnrpc_StopResponse>)
    func subscribeChannelGraph(_ request: Lnrpc_GraphTopologySubscription, completion: @escaping ApiCompletion<Lnrpc_GraphTopologyUpdate>)
    func debugLevel(_ request: Lnrpc_DebugLevelRequest, completion: @escaping ApiCompletion<Lnrpc_DebugLevelResponse>)
    func feeReport(_ request: Lnrpc_FeeReportRequest, completion: @escaping ApiCompletion<Lnrpc_FeeReportResponse>)
    func updateChannelPolicy(_ request: Lnrpc_PolicyUpdateRequest, completion: @escaping ApiCompletion<Lnrpc_PolicyUpdateResponse>)
    func forwardingHistory(_ request: Lnrpc_ForwardingHistoryRequest, completion: @escaping ApiCompletion<Lnrpc_ForwardingHistoryResponse>)
    func exportChannelBackup(_ request: Lnrpc_ExportChannelBackupRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelBackup>)
    func exportAllChannelBackups(_ request: Lnrpc_ChanBackupExportRequest, completion: @escaping ApiCompletion<Lnrpc_ChanBackupSnapshot>)
    func verifyChanBackup(_ request: Lnrpc_ChanBackupSnapshot, completion: @escaping ApiCompletion<Lnrpc_VerifyChanBackupResponse>)
    func restoreChannelBackups(_ request: Lnrpc_RestoreChanBackupRequest, completion: @escaping ApiCompletion<Lnrpc_RestoreBackupResponse>)
    func subscribeChannelBackups(_ request: Lnrpc_ChannelBackupSubscription, completion: @escaping ApiCompletion<Lnrpc_ChanBackupSnapshot>)
}

class StreamingLightningConnection: LightningConnection {
    func walletBalance(_ request: Lnrpc_WalletBalanceRequest, completion: @escaping ApiCompletion<Lnrpc_WalletBalanceResponse>) {
        LndmobileWalletBalance(try? request.serializedData(), LndCallback(completion))
    }
    func channelBalance(_ request: Lnrpc_ChannelBalanceRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelBalanceResponse>) {
        LndmobileChannelBalance(try? request.serializedData(), LndCallback(completion))
    }
    func getTransactions(_ request: Lnrpc_GetTransactionsRequest, completion: @escaping ApiCompletion<Lnrpc_TransactionDetails>) {
        LndmobileGetTransactions(try? request.serializedData(), LndCallback(completion))
    }
    func estimateFee(_ request: Lnrpc_EstimateFeeRequest, completion: @escaping ApiCompletion<Lnrpc_EstimateFeeResponse>) {
        LndmobileEstimateFee(try? request.serializedData(), LndCallback(completion))
    }
    func sendCoins(_ request: Lnrpc_SendCoinsRequest, completion: @escaping ApiCompletion<Lnrpc_SendCoinsResponse>) {
        LndmobileSendCoins(try? request.serializedData(), LndCallback(completion))
    }
    func listUnspent(_ request: Lnrpc_ListUnspentRequest, completion: @escaping ApiCompletion<Lnrpc_ListUnspentResponse>) {
        LndmobileListUnspent(try? request.serializedData(), LndCallback(completion))
    }
    func subscribeTransactions(_ request: Lnrpc_GetTransactionsRequest, completion: @escaping ApiCompletion<Lnrpc_Transaction>) {
        LndmobileSubscribeTransactions(try? request.serializedData(), LndCallback(completion))
    }
    func sendMany(_ request: Lnrpc_SendManyRequest, completion: @escaping ApiCompletion<Lnrpc_SendManyResponse>) {
        LndmobileSendMany(try? request.serializedData(), LndCallback(completion))
    }
    func newAddress(_ request: Lnrpc_NewAddressRequest, completion: @escaping ApiCompletion<Lnrpc_NewAddressResponse>) {
        LndmobileNewAddress(try? request.serializedData(), LndCallback(completion))
    }
    func signMessage(_ request: Lnrpc_SignMessageRequest, completion: @escaping ApiCompletion<Lnrpc_SignMessageResponse>) {
        LndmobileSignMessage(try? request.serializedData(), LndCallback(completion))
    }
    func verifyMessage(_ request: Lnrpc_VerifyMessageRequest, completion: @escaping ApiCompletion<Lnrpc_VerifyMessageResponse>) {
        LndmobileVerifyMessage(try? request.serializedData(), LndCallback(completion))
    }
    func connectPeer(_ request: Lnrpc_ConnectPeerRequest, completion: @escaping ApiCompletion<Lnrpc_ConnectPeerResponse>) {
        LndmobileConnectPeer(try? request.serializedData(), LndCallback(completion))
    }
    func disconnectPeer(_ request: Lnrpc_DisconnectPeerRequest, completion: @escaping ApiCompletion<Lnrpc_DisconnectPeerResponse>) {
        LndmobileDisconnectPeer(try? request.serializedData(), LndCallback(completion))
    }
    func listPeers(_ request: Lnrpc_ListPeersRequest, completion: @escaping ApiCompletion<Lnrpc_ListPeersResponse>) {
        LndmobileListPeers(try? request.serializedData(), LndCallback(completion))
    }
    func getInfo(_ request: Lnrpc_GetInfoRequest, completion: @escaping ApiCompletion<Lnrpc_GetInfoResponse>) {
        LndmobileGetInfo(try? request.serializedData(), LndCallback(completion))
    }
    func pendingChannels(_ request: Lnrpc_PendingChannelsRequest, completion: @escaping ApiCompletion<Lnrpc_PendingChannelsResponse>) {
        LndmobilePendingChannels(try? request.serializedData(), LndCallback(completion))
    }
    func listChannels(_ request: Lnrpc_ListChannelsRequest, completion: @escaping ApiCompletion<Lnrpc_ListChannelsResponse>) {
        LndmobileListChannels(try? request.serializedData(), LndCallback(completion))
    }
    func subscribeChannelEvents(_ request: Lnrpc_ChannelEventSubscription, completion: @escaping ApiCompletion<Lnrpc_ChannelEventUpdate>) {
        LndmobileSubscribeChannelEvents(try? request.serializedData(), LndCallback(completion))
    }
    func closedChannels(_ request: Lnrpc_ClosedChannelsRequest, completion: @escaping ApiCompletion<Lnrpc_ClosedChannelsResponse>) {
        LndmobileClosedChannels(try? request.serializedData(), LndCallback(completion))
    }
    func openChannelSync(_ request: Lnrpc_OpenChannelRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelPoint>) {
        LndmobileOpenChannelSync(try? request.serializedData(), LndCallback(completion))
    }
    func openChannel(_ request: Lnrpc_OpenChannelRequest, completion: @escaping ApiCompletion<Lnrpc_OpenStatusUpdate>) {
        LndmobileOpenChannel(try? request.serializedData(), LndCallback(completion))
    }
    func closeChannel(_ request: Lnrpc_CloseChannelRequest, completion: @escaping ApiCompletion<Lnrpc_CloseStatusUpdate>) {
        LndmobileCloseChannel(try? request.serializedData(), LndCallback(completion))
    }
    func abandonChannel(_ request: Lnrpc_AbandonChannelRequest, completion: @escaping ApiCompletion<Lnrpc_AbandonChannelResponse>) {
        LndmobileAbandonChannel(try? request.serializedData(), LndCallback(completion))
    }
    // skipped: sendPayment
    func sendPaymentSync(_ request: Lnrpc_SendRequest, completion: @escaping ApiCompletion<Lnrpc_SendResponse>) {
        LndmobileSendPaymentSync(try? request.serializedData(), LndCallback(completion))
    }
    // skipped: sendToRoute
    func sendToRouteSync(_ request: Lnrpc_SendToRouteRequest, completion: @escaping ApiCompletion<Lnrpc_SendResponse>) {
        LndmobileSendToRouteSync(try? request.serializedData(), LndCallback(completion))
    }
    func addInvoice(_ request: Lnrpc_Invoice, completion: @escaping ApiCompletion<Lnrpc_AddInvoiceResponse>) {
        LndmobileAddInvoice(try? request.serializedData(), LndCallback(completion))
    }
    func listInvoices(_ request: Lnrpc_ListInvoiceRequest, completion: @escaping ApiCompletion<Lnrpc_ListInvoiceResponse>) {
        LndmobileListInvoices(try? request.serializedData(), LndCallback(completion))
    }
    func lookupInvoice(_ request: Lnrpc_PaymentHash, completion: @escaping ApiCompletion<Lnrpc_Invoice>) {
        LndmobileLookupInvoice(try? request.serializedData(), LndCallback(completion))
    }
    func subscribeInvoices(_ request: Lnrpc_InvoiceSubscription, completion: @escaping ApiCompletion<Lnrpc_Invoice>) {
        LndmobileSubscribeInvoices(try? request.serializedData(), LndCallback(completion))
    }
    func decodePayReq(_ request: Lnrpc_PayReqString, completion: @escaping ApiCompletion<Lnrpc_PayReq>) {
        LndmobileDecodePayReq(try? request.serializedData(), LndCallback(completion))
    }
    func listPayments(_ request: Lnrpc_ListPaymentsRequest, completion: @escaping ApiCompletion<Lnrpc_ListPaymentsResponse>) {
        LndmobileListPayments(try? request.serializedData(), LndCallback(completion))
    }
    func deleteAllPayments(_ request: Lnrpc_DeleteAllPaymentsRequest, completion: @escaping ApiCompletion<Lnrpc_DeleteAllPaymentsResponse>) {
        LndmobileDeleteAllPayments(try? request.serializedData(), LndCallback(completion))
    }
    func describeGraph(_ request: Lnrpc_ChannelGraphRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelGraph>) {
        LndmobileDescribeGraph(try? request.serializedData(), LndCallback(completion))
    }
    func getChanInfo(_ request: Lnrpc_ChanInfoRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelEdge>) {
        LndmobileGetChanInfo(try? request.serializedData(), LndCallback(completion))
    }
    func getNodeInfo(_ request: Lnrpc_NodeInfoRequest, completion: @escaping ApiCompletion<Lnrpc_NodeInfo>) {
        LndmobileGetNodeInfo(try? request.serializedData(), LndCallback(completion))
    }
    func queryRoutes(_ request: Lnrpc_QueryRoutesRequest, completion: @escaping ApiCompletion<Lnrpc_QueryRoutesResponse>) {
        LndmobileQueryRoutes(try? request.serializedData(), LndCallback(completion))
    }
    func getNetworkInfo(_ request: Lnrpc_NetworkInfoRequest, completion: @escaping ApiCompletion<Lnrpc_NetworkInfo>) {
        LndmobileGetNetworkInfo(try? request.serializedData(), LndCallback(completion))
    }
    func stopDaemon(_ request: Lnrpc_StopRequest, completion: @escaping ApiCompletion<Lnrpc_StopResponse>) {
        LndmobileStopDaemon(try? request.serializedData(), LndCallback(completion))
    }
    func subscribeChannelGraph(_ request: Lnrpc_GraphTopologySubscription, completion: @escaping ApiCompletion<Lnrpc_GraphTopologyUpdate>) {
        LndmobileSubscribeChannelGraph(try? request.serializedData(), LndCallback(completion))
    }
    func debugLevel(_ request: Lnrpc_DebugLevelRequest, completion: @escaping ApiCompletion<Lnrpc_DebugLevelResponse>) {
        LndmobileDebugLevel(try? request.serializedData(), LndCallback(completion))
    }
    func feeReport(_ request: Lnrpc_FeeReportRequest, completion: @escaping ApiCompletion<Lnrpc_FeeReportResponse>) {
        LndmobileFeeReport(try? request.serializedData(), LndCallback(completion))
    }
    func updateChannelPolicy(_ request: Lnrpc_PolicyUpdateRequest, completion: @escaping ApiCompletion<Lnrpc_PolicyUpdateResponse>) {
        LndmobileUpdateChannelPolicy(try? request.serializedData(), LndCallback(completion))
    }
    func forwardingHistory(_ request: Lnrpc_ForwardingHistoryRequest, completion: @escaping ApiCompletion<Lnrpc_ForwardingHistoryResponse>) {
        LndmobileForwardingHistory(try? request.serializedData(), LndCallback(completion))
    }
    func exportChannelBackup(_ request: Lnrpc_ExportChannelBackupRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelBackup>) {
        LndmobileExportChannelBackup(try? request.serializedData(), LndCallback(completion))
    }
    func exportAllChannelBackups(_ request: Lnrpc_ChanBackupExportRequest, completion: @escaping ApiCompletion<Lnrpc_ChanBackupSnapshot>) {
        LndmobileExportAllChannelBackups(try? request.serializedData(), LndCallback(completion))
    }
    func verifyChanBackup(_ request: Lnrpc_ChanBackupSnapshot, completion: @escaping ApiCompletion<Lnrpc_VerifyChanBackupResponse>) {
        LndmobileVerifyChanBackup(try? request.serializedData(), LndCallback(completion))
    }
    func restoreChannelBackups(_ request: Lnrpc_RestoreChanBackupRequest, completion: @escaping ApiCompletion<Lnrpc_RestoreBackupResponse>) {
        LndmobileRestoreChannelBackups(try? request.serializedData(), LndCallback(completion))
    }
    func subscribeChannelBackups(_ request: Lnrpc_ChannelBackupSubscription, completion: @escaping ApiCompletion<Lnrpc_ChanBackupSnapshot>) {
        LndmobileSubscribeChannelBackups(try? request.serializedData(), LndCallback(completion))
    }
}

final class RPCLightningConnection: LightningConnection {
    let service: Lnrpc_LightningService
    
    public init(configuration: RPCCredentials) {
        service = Lnrpc_LightningServiceClient(configuration: configuration)
    }
    
    func walletBalance(_ request: Lnrpc_WalletBalanceRequest, completion: @escaping ApiCompletion<Lnrpc_WalletBalanceResponse>) {
        _ = try? service.walletBalance(request, completion: createHandler(completion))
    }
    
    func channelBalance(_ request: Lnrpc_ChannelBalanceRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelBalanceResponse>) {
        _ = try? service.channelBalance(request, completion: createHandler(completion))
    }
    
    func getTransactions(_ request: Lnrpc_GetTransactionsRequest, completion: @escaping ApiCompletion<Lnrpc_TransactionDetails>) {
        _ = try? service.getTransactions(request, completion: createHandler(completion))
    }
    
    func estimateFee(_ request: Lnrpc_EstimateFeeRequest, completion: @escaping ApiCompletion<Lnrpc_EstimateFeeResponse>) {
        _ = try? service.estimateFee(request, completion: createHandler(completion))
    }
    
    func sendCoins(_ request: Lnrpc_SendCoinsRequest, completion: @escaping ApiCompletion<Lnrpc_SendCoinsResponse>) {
        _ = try? service.sendCoins(request, completion: createHandler(completion))
    }
    
    func listUnspent(_ request: Lnrpc_ListUnspentRequest, completion: @escaping ApiCompletion<Lnrpc_ListUnspentResponse>) {
        _ = try? service.listUnspent(request, completion: createHandler(completion))
    }
    
    func subscribeTransactions(_ request: Lnrpc_GetTransactionsRequest, completion: @escaping ApiCompletion<Lnrpc_Transaction>) {
        do {
            let call = try service.subscribeTransactions(request) { Logger.error($0) }
            try receiveSubscribeTransactionsUpdate(call: call, completion: completion)
        } catch {
            Logger.error(error)
        }
    }
    private func receiveSubscribeTransactionsUpdate(call: Lnrpc_LightningSubscribeTransactionsCall, completion: @escaping ApiCompletion<Lnrpc_Transaction>) throws {
        try call.receive { [weak self] in
            do {
                try handleStreamResult($0, completion: completion)
                try self?.receiveSubscribeTransactionsUpdate(call: call, completion: completion)
            } catch {}
        }
    }
    
    func sendMany(_ request: Lnrpc_SendManyRequest, completion: @escaping ApiCompletion<Lnrpc_SendManyResponse>) {
        _ = try? service.sendMany(request, completion: createHandler(completion))
    }
    
    func newAddress(_ request: Lnrpc_NewAddressRequest, completion: @escaping ApiCompletion<Lnrpc_NewAddressResponse>) {
        _ = try? service.newAddress(request, completion: createHandler(completion))
    }
    
    func signMessage(_ request: Lnrpc_SignMessageRequest, completion: @escaping ApiCompletion<Lnrpc_SignMessageResponse>) {
        _ = try? service.signMessage(request, completion: createHandler(completion))
    }
    
    func verifyMessage(_ request: Lnrpc_VerifyMessageRequest, completion: @escaping ApiCompletion<Lnrpc_VerifyMessageResponse>) {
        _ = try? service.verifyMessage(request, completion: createHandler(completion))
    }
    
    func connectPeer(_ request: Lnrpc_ConnectPeerRequest, completion: @escaping ApiCompletion<Lnrpc_ConnectPeerResponse>) {
        _ = try? service.connectPeer(request, completion: createHandler(completion))
    }
    
    func disconnectPeer(_ request: Lnrpc_DisconnectPeerRequest, completion: @escaping ApiCompletion<Lnrpc_DisconnectPeerResponse>) {
        _ = try? service.disconnectPeer(request, completion: createHandler(completion))
    }
    
    func listPeers(_ request: Lnrpc_ListPeersRequest, completion: @escaping ApiCompletion<Lnrpc_ListPeersResponse>) {
        _ = try? service.listPeers(request, completion: createHandler(completion))
    }
    
    func getInfo(_ request: Lnrpc_GetInfoRequest, completion: @escaping ApiCompletion<Lnrpc_GetInfoResponse>) {
        _ = try? service.getInfo(request, completion: createHandler(completion))
    }
    
    func pendingChannels(_ request: Lnrpc_PendingChannelsRequest, completion: @escaping ApiCompletion<Lnrpc_PendingChannelsResponse>) {
        _ = try? service.pendingChannels(request, completion: createHandler(completion))
    }
    
    func listChannels(_ request: Lnrpc_ListChannelsRequest, completion: @escaping ApiCompletion<Lnrpc_ListChannelsResponse>) {
        _ = try? service.listChannels(request, completion: createHandler(completion))
    }
    
    func subscribeChannelEvents(_ request: Lnrpc_ChannelEventSubscription, completion: @escaping ApiCompletion<Lnrpc_ChannelEventUpdate>) {
        do {
            let call = try service.subscribeChannelEvents(request) { Logger.error($0) }
            try receiveSubscribeChannelEventsUpdate(call: call, completion: completion)
        } catch {
            Logger.error(error)
        }
    }
    private func receiveSubscribeChannelEventsUpdate(call: Lnrpc_LightningSubscribeChannelEventsCall, completion: @escaping ApiCompletion<Lnrpc_ChannelEventUpdate>) throws {
        try call.receive { [weak self] in
            do {
                try handleStreamResult($0, completion: completion)
                try self?.receiveSubscribeChannelEventsUpdate(call: call, completion: completion)
            } catch {}
        }
    }
    
    func closedChannels(_ request: Lnrpc_ClosedChannelsRequest, completion: @escaping ApiCompletion<Lnrpc_ClosedChannelsResponse>) {
        _ = try? service.closedChannels(request, completion: createHandler(completion))
    }
    
    func openChannelSync(_ request: Lnrpc_OpenChannelRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelPoint>) {
        _ = try? service.openChannelSync(request, completion: createHandler(completion))
    }
    
    func openChannel(_ request: Lnrpc_OpenChannelRequest, completion: @escaping ApiCompletion<Lnrpc_OpenStatusUpdate>) {
        do {
            let call = try service.openChannel(request) { Logger.error($0) }
            try receiveOpenChannelUpdate(call: call, completion: completion)
        } catch {
            Logger.error(error)
        }
    }
    private func receiveOpenChannelUpdate(call: Lnrpc_LightningOpenChannelCall, completion: @escaping ApiCompletion<Lnrpc_OpenStatusUpdate>) throws {
        try call.receive { [weak self] in
            do {
                try handleStreamResult($0, completion: completion)
                try self?.receiveOpenChannelUpdate(call: call, completion: completion)
            } catch {}
        }
    }
    
    func closeChannel(_ request: Lnrpc_CloseChannelRequest, completion: @escaping ApiCompletion<Lnrpc_CloseStatusUpdate>) {
        do {
            let call = try service.closeChannel(request) { Logger.error($0) }
            try receiveCloseChannelUpdate(call: call, completion: completion)
        } catch {
            Logger.error(error)
        }
    }
    private func receiveCloseChannelUpdate(call: Lnrpc_LightningCloseChannelCall, completion: @escaping ApiCompletion<Lnrpc_CloseStatusUpdate>) throws {
        try call.receive { [weak self] in
            do {
                try handleStreamResult($0, completion: completion)
                try self?.receiveCloseChannelUpdate(call: call, completion: completion)
            } catch {}
        }
    }
    
    func abandonChannel(_ request: Lnrpc_AbandonChannelRequest, completion: @escaping ApiCompletion<Lnrpc_AbandonChannelResponse>) {
        _ = try? service.abandonChannel(request, completion: createHandler(completion))
    }
    
    // skipped: sendPayment
    
    func sendPaymentSync(_ request: Lnrpc_SendRequest, completion: @escaping ApiCompletion<Lnrpc_SendResponse>) {
        _ = try? service.sendPaymentSync(request, completion: createHandler(completion))
    }
    
    // skipped: sendToRoute
    
    func sendToRouteSync(_ request: Lnrpc_SendToRouteRequest, completion: @escaping ApiCompletion<Lnrpc_SendResponse>) {
        _ = try? service.sendToRouteSync(request, completion: createHandler(completion))
    }
    
    func addInvoice(_ request: Lnrpc_Invoice, completion: @escaping ApiCompletion<Lnrpc_AddInvoiceResponse>) {
        _ = try? service.addInvoice(request, completion: createHandler(completion))
    }
    
    func listInvoices(_ request: Lnrpc_ListInvoiceRequest, completion: @escaping ApiCompletion<Lnrpc_ListInvoiceResponse>) {
        _ = try? service.listInvoices(request, completion: createHandler(completion))
    }
    
    func lookupInvoice(_ request: Lnrpc_PaymentHash, completion: @escaping ApiCompletion<Lnrpc_Invoice>) {
        _ = try? service.lookupInvoice(request, completion: createHandler(completion))
    }
    
    func subscribeInvoices(_ request: Lnrpc_InvoiceSubscription, completion: @escaping ApiCompletion<Lnrpc_Invoice>) {
        do {
            let call = try service.subscribeInvoices(request) { Logger.error($0) }
            try receiveSubscribeInvoicesUpdate(call: call, completion: completion)
        } catch {
            Logger.error(error)
        }
    }
    private func receiveSubscribeInvoicesUpdate(call: Lnrpc_LightningSubscribeInvoicesCall, completion: @escaping ApiCompletion<Lnrpc_Invoice>) throws {
        try call.receive { [weak self] in
            do {
                try handleStreamResult($0, completion: completion)
                try self?.receiveSubscribeInvoicesUpdate(call: call, completion: completion)
            } catch {}
        }
    }
    
    func decodePayReq(_ request: Lnrpc_PayReqString, completion: @escaping ApiCompletion<Lnrpc_PayReq>) {
        _ = try? service.decodePayReq(request, completion: createHandler(completion))
    }
    
    func listPayments(_ request: Lnrpc_ListPaymentsRequest, completion: @escaping ApiCompletion<Lnrpc_ListPaymentsResponse>) {
        _ = try? service.listPayments(request, completion: createHandler(completion))
    }
    
    func deleteAllPayments(_ request: Lnrpc_DeleteAllPaymentsRequest, completion: @escaping ApiCompletion<Lnrpc_DeleteAllPaymentsResponse>) {
        _ = try? service.deleteAllPayments(request, completion: createHandler(completion))
    }
    
    func describeGraph(_ request: Lnrpc_ChannelGraphRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelGraph>) {
        _ = try? service.describeGraph(request, completion: createHandler(completion))
    }
    
    func getChanInfo(_ request: Lnrpc_ChanInfoRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelEdge>) {
        _ = try? service.getChanInfo(request, completion: createHandler(completion))
    }
    
    func getNodeInfo(_ request: Lnrpc_NodeInfoRequest, completion: @escaping ApiCompletion<Lnrpc_NodeInfo>) {
        _ = try? service.getNodeInfo(request, completion: createHandler(completion))
    }
    
    func queryRoutes(_ request: Lnrpc_QueryRoutesRequest, completion: @escaping ApiCompletion<Lnrpc_QueryRoutesResponse>) {
        _ = try? service.queryRoutes(request, completion: createHandler(completion))
    }
    
    func getNetworkInfo(_ request: Lnrpc_NetworkInfoRequest, completion: @escaping ApiCompletion<Lnrpc_NetworkInfo>) {
        _ = try? service.getNetworkInfo(request, completion: createHandler(completion))
    }
    
    func stopDaemon(_ request: Lnrpc_StopRequest, completion: @escaping ApiCompletion<Lnrpc_StopResponse>) {
        _ = try? service.stopDaemon(request, completion: createHandler(completion))
    }
    
    func subscribeChannelGraph(_ request: Lnrpc_GraphTopologySubscription, completion: @escaping ApiCompletion<Lnrpc_GraphTopologyUpdate>) {
        do {
            let call = try service.subscribeChannelGraph(request) { Logger.error($0) }
            try receiveSubscribeChannelGraphUpdate(call: call, completion: completion)
        } catch {
            Logger.error(error)
        }
    }
    private func receiveSubscribeChannelGraphUpdate(call: Lnrpc_LightningSubscribeChannelGraphCall, completion: @escaping ApiCompletion<Lnrpc_GraphTopologyUpdate>) throws {
        try call.receive { [weak self] in
            do {
                try handleStreamResult($0, completion: completion)
                try self?.receiveSubscribeChannelGraphUpdate(call: call, completion: completion)
            } catch {}
        }
    }
    
    func debugLevel(_ request: Lnrpc_DebugLevelRequest, completion: @escaping ApiCompletion<Lnrpc_DebugLevelResponse>) {
        _ = try? service.debugLevel(request, completion: createHandler(completion))
    }
    
    func feeReport(_ request: Lnrpc_FeeReportRequest, completion: @escaping ApiCompletion<Lnrpc_FeeReportResponse>) {
        _ = try? service.feeReport(request, completion: createHandler(completion))
    }
    
    func updateChannelPolicy(_ request: Lnrpc_PolicyUpdateRequest, completion: @escaping ApiCompletion<Lnrpc_PolicyUpdateResponse>) {
        _ = try? service.updateChannelPolicy(request, completion: createHandler(completion))
    }
    
    func forwardingHistory(_ request: Lnrpc_ForwardingHistoryRequest, completion: @escaping ApiCompletion<Lnrpc_ForwardingHistoryResponse>) {
        _ = try? service.forwardingHistory(request, completion: createHandler(completion))
    }
    
    func exportChannelBackup(_ request: Lnrpc_ExportChannelBackupRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelBackup>) {
        _ = try? service.exportChannelBackup(request, completion: createHandler(completion))
    }
    
    func exportAllChannelBackups(_ request: Lnrpc_ChanBackupExportRequest, completion: @escaping ApiCompletion<Lnrpc_ChanBackupSnapshot>) {
        _ = try? service.exportAllChannelBackups(request, completion: createHandler(completion))
    }
    
    func verifyChanBackup(_ request: Lnrpc_ChanBackupSnapshot, completion: @escaping ApiCompletion<Lnrpc_VerifyChanBackupResponse>) {
        _ = try? service.verifyChanBackup(request, completion: createHandler(completion))
    }
    
    func restoreChannelBackups(_ request: Lnrpc_RestoreChanBackupRequest, completion: @escaping ApiCompletion<Lnrpc_RestoreBackupResponse>) {
        _ = try? service.restoreChannelBackups(request, completion: createHandler(completion))
    }
    
    func subscribeChannelBackups(_ request: Lnrpc_ChannelBackupSubscription, completion: @escaping ApiCompletion<Lnrpc_ChanBackupSnapshot>) {
        do {
            let call = try service.subscribeChannelBackups(request) { Logger.error($0) }
            try receiveSubscribeChannelBackupsUpdate(call: call, completion: completion)
        } catch {
            Logger.error(error)
        }
    }
    private func receiveSubscribeChannelBackupsUpdate(call: Lnrpc_LightningSubscribeChannelBackupsCall, completion: @escaping ApiCompletion<Lnrpc_ChanBackupSnapshot>) throws {
        try call.receive { [weak self] in
            do {
                try handleStreamResult($0, completion: completion)
                try self?.receiveSubscribeChannelBackupsUpdate(call: call, completion: completion)
            } catch {}
        }
    }
    
}

class MockLightningConnection: LightningConnection {
    private let walletBalance: Lnrpc_WalletBalanceResponse?
    private let channelBalance: Lnrpc_ChannelBalanceResponse?
    private let getTransactions: Lnrpc_TransactionDetails?
    private let estimateFee: Lnrpc_EstimateFeeResponse?
    private let sendCoins: Lnrpc_SendCoinsResponse?
    private let listUnspent: Lnrpc_ListUnspentResponse?
    private let subscribeTransactions: Lnrpc_Transaction?
    private let sendMany: Lnrpc_SendManyResponse?
    private let newAddress: Lnrpc_NewAddressResponse?
    private let signMessage: Lnrpc_SignMessageResponse?
    private let verifyMessage: Lnrpc_VerifyMessageResponse?
    private let connectPeer: Lnrpc_ConnectPeerResponse?
    private let disconnectPeer: Lnrpc_DisconnectPeerResponse?
    private let listPeers: Lnrpc_ListPeersResponse?
    private let getInfo: Lnrpc_GetInfoResponse?
    private let pendingChannels: Lnrpc_PendingChannelsResponse?
    private let listChannels: Lnrpc_ListChannelsResponse?
    private let subscribeChannelEvents: Lnrpc_ChannelEventUpdate?
    private let closedChannels: Lnrpc_ClosedChannelsResponse?
    private let openChannelSync: Lnrpc_ChannelPoint?
    private let openChannel: Lnrpc_OpenStatusUpdate?
    private let closeChannel: Lnrpc_CloseStatusUpdate?
    private let abandonChannel: Lnrpc_AbandonChannelResponse?
    // skipped: sendPayment
    private let sendPaymentSync: Lnrpc_SendResponse?
    // skipped: sendToRoute
    private let sendToRouteSync: Lnrpc_SendResponse?
    private let addInvoice: Lnrpc_AddInvoiceResponse?
    private let listInvoices: Lnrpc_ListInvoiceResponse?
    private let lookupInvoice: Lnrpc_Invoice?
    private let subscribeInvoices: Lnrpc_Invoice?
    private let decodePayReq: Lnrpc_PayReq?
    private let listPayments: Lnrpc_ListPaymentsResponse?
    private let deleteAllPayments: Lnrpc_DeleteAllPaymentsResponse?
    private let describeGraph: Lnrpc_ChannelGraph?
    private let getChanInfo: Lnrpc_ChannelEdge?
    private let getNodeInfo: Lnrpc_NodeInfo?
    private let queryRoutes: Lnrpc_QueryRoutesResponse?
    private let getNetworkInfo: Lnrpc_NetworkInfo?
    private let stopDaemon: Lnrpc_StopResponse?
    private let subscribeChannelGraph: Lnrpc_GraphTopologyUpdate?
    private let debugLevel: Lnrpc_DebugLevelResponse?
    private let feeReport: Lnrpc_FeeReportResponse?
    private let updateChannelPolicy: Lnrpc_PolicyUpdateResponse?
    private let forwardingHistory: Lnrpc_ForwardingHistoryResponse?
    private let exportChannelBackup: Lnrpc_ChannelBackup?
    private let exportAllChannelBackups: Lnrpc_ChanBackupSnapshot?
    private let verifyChanBackup: Lnrpc_VerifyChanBackupResponse?
    private let restoreChannelBackups: Lnrpc_RestoreBackupResponse?
    private let subscribeChannelBackups: Lnrpc_ChanBackupSnapshot?
    
    init(
        walletBalance: Lnrpc_WalletBalanceResponse? = nil,
        channelBalance: Lnrpc_ChannelBalanceResponse? = nil,
        getTransactions: Lnrpc_TransactionDetails? = nil,
        estimateFee: Lnrpc_EstimateFeeResponse? = nil,
        sendCoins: Lnrpc_SendCoinsResponse? = nil,
        listUnspent: Lnrpc_ListUnspentResponse? = nil,
        subscribeTransactions: Lnrpc_Transaction? = nil,
        sendMany: Lnrpc_SendManyResponse? = nil,
        newAddress: Lnrpc_NewAddressResponse? = nil,
        signMessage: Lnrpc_SignMessageResponse? = nil,
        verifyMessage: Lnrpc_VerifyMessageResponse? = nil,
        connectPeer: Lnrpc_ConnectPeerResponse? = nil,
        disconnectPeer: Lnrpc_DisconnectPeerResponse? = nil,
        listPeers: Lnrpc_ListPeersResponse? = nil,
        getInfo: Lnrpc_GetInfoResponse? = nil,
        pendingChannels: Lnrpc_PendingChannelsResponse? = nil,
        listChannels: Lnrpc_ListChannelsResponse? = nil,
        subscribeChannelEvents: Lnrpc_ChannelEventUpdate? = nil,
        closedChannels: Lnrpc_ClosedChannelsResponse? = nil,
        openChannelSync: Lnrpc_ChannelPoint? = nil,
        openChannel: Lnrpc_OpenStatusUpdate? = nil,
        closeChannel: Lnrpc_CloseStatusUpdate? = nil,
        abandonChannel: Lnrpc_AbandonChannelResponse? = nil,
        // skipped: sendPayment
        sendPaymentSync: Lnrpc_SendResponse? = nil,
        // skipped: sendToRoute
        sendToRouteSync: Lnrpc_SendResponse? = nil,
        addInvoice: Lnrpc_AddInvoiceResponse? = nil,
        listInvoices: Lnrpc_ListInvoiceResponse? = nil,
        lookupInvoice: Lnrpc_Invoice? = nil,
        subscribeInvoices: Lnrpc_Invoice? = nil,
        decodePayReq: Lnrpc_PayReq? = nil,
        listPayments: Lnrpc_ListPaymentsResponse? = nil,
        deleteAllPayments: Lnrpc_DeleteAllPaymentsResponse? = nil,
        describeGraph: Lnrpc_ChannelGraph? = nil,
        getChanInfo: Lnrpc_ChannelEdge? = nil,
        getNodeInfo: Lnrpc_NodeInfo? = nil,
        queryRoutes: Lnrpc_QueryRoutesResponse? = nil,
        getNetworkInfo: Lnrpc_NetworkInfo? = nil,
        stopDaemon: Lnrpc_StopResponse? = nil,
        subscribeChannelGraph: Lnrpc_GraphTopologyUpdate? = nil,
        debugLevel: Lnrpc_DebugLevelResponse? = nil,
        feeReport: Lnrpc_FeeReportResponse? = nil,
        updateChannelPolicy: Lnrpc_PolicyUpdateResponse? = nil,
        forwardingHistory: Lnrpc_ForwardingHistoryResponse? = nil,
        exportChannelBackup: Lnrpc_ChannelBackup? = nil,
        exportAllChannelBackups: Lnrpc_ChanBackupSnapshot? = nil,
        verifyChanBackup: Lnrpc_VerifyChanBackupResponse? = nil,
        restoreChannelBackups: Lnrpc_RestoreBackupResponse? = nil,
        subscribeChannelBackups: Lnrpc_ChanBackupSnapshot? = nil
        ) {
        self.walletBalance = walletBalance
        self.channelBalance = channelBalance
        self.getTransactions = getTransactions
        self.estimateFee = estimateFee
        self.sendCoins = sendCoins
        self.listUnspent = listUnspent
        self.subscribeTransactions = subscribeTransactions
        self.sendMany = sendMany
        self.newAddress = newAddress
        self.signMessage = signMessage
        self.verifyMessage = verifyMessage
        self.connectPeer = connectPeer
        self.disconnectPeer = disconnectPeer
        self.listPeers = listPeers
        self.getInfo = getInfo
        self.pendingChannels = pendingChannels
        self.listChannels = listChannels
        self.subscribeChannelEvents = subscribeChannelEvents
        self.closedChannels = closedChannels
        self.openChannelSync = openChannelSync
        self.openChannel = openChannel
        self.closeChannel = closeChannel
        self.abandonChannel = abandonChannel
        // skipped: sendPayment
        self.sendPaymentSync = sendPaymentSync
        // skipped: sendToRoute
        self.sendToRouteSync = sendToRouteSync
        self.addInvoice = addInvoice
        self.listInvoices = listInvoices
        self.lookupInvoice = lookupInvoice
        self.subscribeInvoices = subscribeInvoices
        self.decodePayReq = decodePayReq
        self.listPayments = listPayments
        self.deleteAllPayments = deleteAllPayments
        self.describeGraph = describeGraph
        self.getChanInfo = getChanInfo
        self.getNodeInfo = getNodeInfo
        self.queryRoutes = queryRoutes
        self.getNetworkInfo = getNetworkInfo
        self.stopDaemon = stopDaemon
        self.subscribeChannelGraph = subscribeChannelGraph
        self.debugLevel = debugLevel
        self.feeReport = feeReport
        self.updateChannelPolicy = updateChannelPolicy
        self.forwardingHistory = forwardingHistory
        self.exportChannelBackup = exportChannelBackup
        self.exportAllChannelBackups = exportAllChannelBackups
        self.verifyChanBackup = verifyChanBackup
        self.restoreChannelBackups = restoreChannelBackups
        self.subscribeChannelBackups = subscribeChannelBackups
    }
    func walletBalance(_ request: Lnrpc_WalletBalanceRequest, completion: @escaping ApiCompletion<Lnrpc_WalletBalanceResponse>) {
        completion(Result(value: walletBalance, error: LndApiError.unknownError))
    }
    func channelBalance(_ request: Lnrpc_ChannelBalanceRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelBalanceResponse>) {
        completion(Result(value: channelBalance, error: LndApiError.unknownError))
    }
    func getTransactions(_ request: Lnrpc_GetTransactionsRequest, completion: @escaping ApiCompletion<Lnrpc_TransactionDetails>) {
        completion(Result(value: getTransactions, error: LndApiError.unknownError))
    }
    func estimateFee(_ request: Lnrpc_EstimateFeeRequest, completion: @escaping ApiCompletion<Lnrpc_EstimateFeeResponse>) {
        completion(Result(value: estimateFee, error: LndApiError.unknownError))
    }
    func sendCoins(_ request: Lnrpc_SendCoinsRequest, completion: @escaping ApiCompletion<Lnrpc_SendCoinsResponse>) {
        completion(Result(value: sendCoins, error: LndApiError.unknownError))
    }
    func listUnspent(_ request: Lnrpc_ListUnspentRequest, completion: @escaping ApiCompletion<Lnrpc_ListUnspentResponse>) {
        completion(Result(value: listUnspent, error: LndApiError.unknownError))
    }
    func subscribeTransactions(_ request: Lnrpc_GetTransactionsRequest, completion: @escaping ApiCompletion<Lnrpc_Transaction>) {
        completion(Result(value: subscribeTransactions, error: LndApiError.unknownError))
    }
    func sendMany(_ request: Lnrpc_SendManyRequest, completion: @escaping ApiCompletion<Lnrpc_SendManyResponse>) {
        completion(Result(value: sendMany, error: LndApiError.unknownError))
    }
    func newAddress(_ request: Lnrpc_NewAddressRequest, completion: @escaping ApiCompletion<Lnrpc_NewAddressResponse>) {
        completion(Result(value: newAddress, error: LndApiError.unknownError))
    }
    func signMessage(_ request: Lnrpc_SignMessageRequest, completion: @escaping ApiCompletion<Lnrpc_SignMessageResponse>) {
        completion(Result(value: signMessage, error: LndApiError.unknownError))
    }
    func verifyMessage(_ request: Lnrpc_VerifyMessageRequest, completion: @escaping ApiCompletion<Lnrpc_VerifyMessageResponse>) {
        completion(Result(value: verifyMessage, error: LndApiError.unknownError))
    }
    func connectPeer(_ request: Lnrpc_ConnectPeerRequest, completion: @escaping ApiCompletion<Lnrpc_ConnectPeerResponse>) {
        completion(Result(value: connectPeer, error: LndApiError.unknownError))
    }
    func disconnectPeer(_ request: Lnrpc_DisconnectPeerRequest, completion: @escaping ApiCompletion<Lnrpc_DisconnectPeerResponse>) {
        completion(Result(value: disconnectPeer, error: LndApiError.unknownError))
    }
    func listPeers(_ request: Lnrpc_ListPeersRequest, completion: @escaping ApiCompletion<Lnrpc_ListPeersResponse>) {
        completion(Result(value: listPeers, error: LndApiError.unknownError))
    }
    func getInfo(_ request: Lnrpc_GetInfoRequest, completion: @escaping ApiCompletion<Lnrpc_GetInfoResponse>) {
        completion(Result(value: getInfo, error: LndApiError.unknownError))
    }
    func pendingChannels(_ request: Lnrpc_PendingChannelsRequest, completion: @escaping ApiCompletion<Lnrpc_PendingChannelsResponse>) {
        completion(Result(value: pendingChannels, error: LndApiError.unknownError))
    }
    func listChannels(_ request: Lnrpc_ListChannelsRequest, completion: @escaping ApiCompletion<Lnrpc_ListChannelsResponse>) {
        completion(Result(value: listChannels, error: LndApiError.unknownError))
    }
    func subscribeChannelEvents(_ request: Lnrpc_ChannelEventSubscription, completion: @escaping ApiCompletion<Lnrpc_ChannelEventUpdate>) {
        completion(Result(value: subscribeChannelEvents, error: LndApiError.unknownError))
    }
    func closedChannels(_ request: Lnrpc_ClosedChannelsRequest, completion: @escaping ApiCompletion<Lnrpc_ClosedChannelsResponse>) {
        completion(Result(value: closedChannels, error: LndApiError.unknownError))
    }
    func openChannelSync(_ request: Lnrpc_OpenChannelRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelPoint>) {
        completion(Result(value: openChannelSync, error: LndApiError.unknownError))
    }
    func openChannel(_ request: Lnrpc_OpenChannelRequest, completion: @escaping ApiCompletion<Lnrpc_OpenStatusUpdate>) {
        completion(Result(value: openChannel, error: LndApiError.unknownError))
    }
    func closeChannel(_ request: Lnrpc_CloseChannelRequest, completion: @escaping ApiCompletion<Lnrpc_CloseStatusUpdate>) {
        completion(Result(value: closeChannel, error: LndApiError.unknownError))
    }
    func abandonChannel(_ request: Lnrpc_AbandonChannelRequest, completion: @escaping ApiCompletion<Lnrpc_AbandonChannelResponse>) {
        completion(Result(value: abandonChannel, error: LndApiError.unknownError))
    }
    // skipped: sendPayment
    func sendPaymentSync(_ request: Lnrpc_SendRequest, completion: @escaping ApiCompletion<Lnrpc_SendResponse>) {
        completion(Result(value: sendPaymentSync, error: LndApiError.unknownError))
    }
    // skipped: sendToRoute
    func sendToRouteSync(_ request: Lnrpc_SendToRouteRequest, completion: @escaping ApiCompletion<Lnrpc_SendResponse>) {
        completion(Result(value: sendToRouteSync, error: LndApiError.unknownError))
    }
    func addInvoice(_ request: Lnrpc_Invoice, completion: @escaping ApiCompletion<Lnrpc_AddInvoiceResponse>) {
        completion(Result(value: addInvoice, error: LndApiError.unknownError))
    }
    func listInvoices(_ request: Lnrpc_ListInvoiceRequest, completion: @escaping ApiCompletion<Lnrpc_ListInvoiceResponse>) {
        completion(Result(value: listInvoices, error: LndApiError.unknownError))
    }
    func lookupInvoice(_ request: Lnrpc_PaymentHash, completion: @escaping ApiCompletion<Lnrpc_Invoice>) {
        completion(Result(value: lookupInvoice, error: LndApiError.unknownError))
    }
    func subscribeInvoices(_ request: Lnrpc_InvoiceSubscription, completion: @escaping ApiCompletion<Lnrpc_Invoice>) {
        completion(Result(value: subscribeInvoices, error: LndApiError.unknownError))
    }
    func decodePayReq(_ request: Lnrpc_PayReqString, completion: @escaping ApiCompletion<Lnrpc_PayReq>) {
        completion(Result(value: decodePayReq, error: LndApiError.unknownError))
    }
    func listPayments(_ request: Lnrpc_ListPaymentsRequest, completion: @escaping ApiCompletion<Lnrpc_ListPaymentsResponse>) {
        completion(Result(value: listPayments, error: LndApiError.unknownError))
    }
    func deleteAllPayments(_ request: Lnrpc_DeleteAllPaymentsRequest, completion: @escaping ApiCompletion<Lnrpc_DeleteAllPaymentsResponse>) {
        completion(Result(value: deleteAllPayments, error: LndApiError.unknownError))
    }
    func describeGraph(_ request: Lnrpc_ChannelGraphRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelGraph>) {
        completion(Result(value: describeGraph, error: LndApiError.unknownError))
    }
    func getChanInfo(_ request: Lnrpc_ChanInfoRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelEdge>) {
        completion(Result(value: getChanInfo, error: LndApiError.unknownError))
    }
    func getNodeInfo(_ request: Lnrpc_NodeInfoRequest, completion: @escaping ApiCompletion<Lnrpc_NodeInfo>) {
        completion(Result(value: getNodeInfo, error: LndApiError.unknownError))
    }
    func queryRoutes(_ request: Lnrpc_QueryRoutesRequest, completion: @escaping ApiCompletion<Lnrpc_QueryRoutesResponse>) {
        completion(Result(value: queryRoutes, error: LndApiError.unknownError))
    }
    func getNetworkInfo(_ request: Lnrpc_NetworkInfoRequest, completion: @escaping ApiCompletion<Lnrpc_NetworkInfo>) {
        completion(Result(value: getNetworkInfo, error: LndApiError.unknownError))
    }
    func stopDaemon(_ request: Lnrpc_StopRequest, completion: @escaping ApiCompletion<Lnrpc_StopResponse>) {
        completion(Result(value: stopDaemon, error: LndApiError.unknownError))
    }
    func subscribeChannelGraph(_ request: Lnrpc_GraphTopologySubscription, completion: @escaping ApiCompletion<Lnrpc_GraphTopologyUpdate>) {
        completion(Result(value: subscribeChannelGraph, error: LndApiError.unknownError))
    }
    func debugLevel(_ request: Lnrpc_DebugLevelRequest, completion: @escaping ApiCompletion<Lnrpc_DebugLevelResponse>) {
        completion(Result(value: debugLevel, error: LndApiError.unknownError))
    }
    func feeReport(_ request: Lnrpc_FeeReportRequest, completion: @escaping ApiCompletion<Lnrpc_FeeReportResponse>) {
        completion(Result(value: feeReport, error: LndApiError.unknownError))
    }
    func updateChannelPolicy(_ request: Lnrpc_PolicyUpdateRequest, completion: @escaping ApiCompletion<Lnrpc_PolicyUpdateResponse>) {
        completion(Result(value: updateChannelPolicy, error: LndApiError.unknownError))
    }
    func forwardingHistory(_ request: Lnrpc_ForwardingHistoryRequest, completion: @escaping ApiCompletion<Lnrpc_ForwardingHistoryResponse>) {
        completion(Result(value: forwardingHistory, error: LndApiError.unknownError))
    }
    func exportChannelBackup(_ request: Lnrpc_ExportChannelBackupRequest, completion: @escaping ApiCompletion<Lnrpc_ChannelBackup>) {
        completion(Result(value: exportChannelBackup, error: LndApiError.unknownError))
    }
    func exportAllChannelBackups(_ request: Lnrpc_ChanBackupExportRequest, completion: @escaping ApiCompletion<Lnrpc_ChanBackupSnapshot>) {
        completion(Result(value: exportAllChannelBackups, error: LndApiError.unknownError))
    }
    func verifyChanBackup(_ request: Lnrpc_ChanBackupSnapshot, completion: @escaping ApiCompletion<Lnrpc_VerifyChanBackupResponse>) {
        completion(Result(value: verifyChanBackup, error: LndApiError.unknownError))
    }
    func restoreChannelBackups(_ request: Lnrpc_RestoreChanBackupRequest, completion: @escaping ApiCompletion<Lnrpc_RestoreBackupResponse>) {
        completion(Result(value: restoreChannelBackups, error: LndApiError.unknownError))
    }
    func subscribeChannelBackups(_ request: Lnrpc_ChannelBackupSubscription, completion: @escaping ApiCompletion<Lnrpc_ChanBackupSnapshot>) {
        completion(Result(value: subscribeChannelBackups, error: LndApiError.unknownError))
    }
}
