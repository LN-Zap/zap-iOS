# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

default_platform(:ios)

app_identifier = ["com.jackmallers.zap", "com.jackmallers.zap.Sticker"]

desc "Update build number."
lane :build_number do
  new_build_number = Time.now.strftime("%Y.%m.%d.%H.%M")
  increment_build_number(build_number: new_build_number)
end

desc "Update app version."
lane :change_version do |options|
  if version = options[:version] 
    increment_version_number(version_number: version)
  else 
    version = prompt(text: "Please enter the version number: ")
  end
  increment_version_number(version_number: version)
end

desc "Builds new Alpha Build and uploads it to Testflight."
lane :alpha do
  ensure_git_status_clean

  increment_build_number(build_number: latest_testflight_build_number(initial_build_number: 0) + 1)

  sync_code_signing(
    username: ENV['ITUNESCONNECT_USER'],
    app_identifier: app_identifier,
    type: "appstore"
  )

  build_ios_app(
    workspace: "Zap.xcworkspace",
    scheme: "Zap",
    output_directory: "./builds/alpha",
    export_method: "app-store"
  )

  upload_to_testflight(
    username: ENV['ITUNESCONNECT_USER'],
    skip_waiting_for_build_processing: true
  )

  add_git_tag

  slack(
    message: "Just uploaded a new iOS alpha to Testflight",
    use_webhook_configured_username_and_icon: true,
    default_payloads: []
  )

  sh("git reset --hard")
end

desc "Add a new UDID to developer portal and update adhoc provisioning profile."
lane :udid do
  device_name = prompt(text: "Device name: ")
  udid = prompt(text: "UDID: ")
  
  register_device(
    name: device_name,
    udid: udid
  )
end

desc "Generate new app icon assets."
lane :update_app_icon do
  appicon(
    appicon_image_file: 'logo.png',
    appicon_path: 'Zap/Assets.xcassets',
    appicon_devices: [:iphone, :ios_marketing]
  )
end

desc "Run all tests."
lane :tests do
  swiftlint()
  
  run_tests(
    workspace: "Zap.xcworkspace",
    configuration: "DebugRemote",
    devices: ["iPhone 8"],
    scheme: "Zap",
    slack_only_on_failure: true,
    code_coverage: true
  )
end
