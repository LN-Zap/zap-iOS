// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LndRpc.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class LNDChain;
@class LNDChannel;
@class LNDChannelCloseSummary;
@class LNDChannelCloseUpdate;
@class LNDChannelEdge;
@class LNDChannelEdgeUpdate;
@class LNDChannelFeeReport;
@class LNDChannelOpenUpdate;
@class LNDChannelPoint;
@class LNDClosedChannelUpdate;
@class LNDFeeLimit;
@class LNDForwardingEvent;
@class LNDHTLC;
@class LNDHop;
@class LNDHopHint;
@class LNDInvoice;
@class LNDLightningAddress;
@class LNDLightningNode;
@class LNDNodeAddress;
@class LNDNodeUpdate;
@class LNDPayment;
@class LNDPeer;
@class LNDPendingChannelsResponse_ClosedChannel;
@class LNDPendingChannelsResponse_ForceClosedChannel;
@class LNDPendingChannelsResponse_PendingChannel;
@class LNDPendingChannelsResponse_PendingOpenChannel;
@class LNDPendingChannelsResponse_WaitingCloseChannel;
@class LNDPendingHTLC;
@class LNDPendingUpdate;
@class LNDRoute;
@class LNDRouteHint;
@class LNDRoutingPolicy;
@class LNDTransaction;
@class LNDUtxo;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum LNDAddressType

/**
 * *
 * `AddressType` has to be one of:
 *
 * - `p2wkh`: Pay to witness key hash (`WITNESS_PUBKEY_HASH` = 0)
 * - `np2wkh`: Pay to nested witness key hash (`NESTED_PUBKEY_HASH` = 1)
 **/
typedef GPB_ENUM(LNDAddressType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  LNDAddressType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  LNDAddressType_WitnessPubkeyHash = 0,
  LNDAddressType_NestedPubkeyHash = 1,
};

GPBEnumDescriptor *LNDAddressType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL LNDAddressType_IsValidValue(int32_t value);

#pragma mark - Enum LNDChannelCloseSummary_ClosureType

typedef GPB_ENUM(LNDChannelCloseSummary_ClosureType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  LNDChannelCloseSummary_ClosureType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  LNDChannelCloseSummary_ClosureType_CooperativeClose = 0,
  LNDChannelCloseSummary_ClosureType_LocalForceClose = 1,
  LNDChannelCloseSummary_ClosureType_RemoteForceClose = 2,
  LNDChannelCloseSummary_ClosureType_BreachClose = 3,
  LNDChannelCloseSummary_ClosureType_FundingCanceled = 4,
  LNDChannelCloseSummary_ClosureType_Abandoned = 5,
};

GPBEnumDescriptor *LNDChannelCloseSummary_ClosureType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL LNDChannelCloseSummary_ClosureType_IsValidValue(int32_t value);

#pragma mark - Enum LNDInvoice_InvoiceState

typedef GPB_ENUM(LNDInvoice_InvoiceState) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  LNDInvoice_InvoiceState_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  LNDInvoice_InvoiceState_Open = 0,
  LNDInvoice_InvoiceState_Settled = 1,
};

GPBEnumDescriptor *LNDInvoice_InvoiceState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL LNDInvoice_InvoiceState_IsValidValue(int32_t value);

#pragma mark - LNDLndRpcRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface LNDLndRpcRoot : GPBRootObject
@end

#pragma mark - LNDGenSeedRequest

typedef GPB_ENUM(LNDGenSeedRequest_FieldNumber) {
  LNDGenSeedRequest_FieldNumber_AezeedPassphrase = 1,
  LNDGenSeedRequest_FieldNumber_SeedEntropy = 2,
};

@interface LNDGenSeedRequest : GPBMessage

/**
 * *
 * aezeed_passphrase is an optional user provided passphrase that will be used
 * to encrypt the generated aezeed cipher seed.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *aezeedPassphrase;

/**
 * *
 * seed_entropy is an optional 16-bytes generated via CSPRNG. If not
 * specified, then a fresh set of randomness will be used to create the seed.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *seedEntropy;

@end

#pragma mark - LNDGenSeedResponse

typedef GPB_ENUM(LNDGenSeedResponse_FieldNumber) {
  LNDGenSeedResponse_FieldNumber_CipherSeedMnemonicArray = 1,
  LNDGenSeedResponse_FieldNumber_EncipheredSeed = 2,
};

@interface LNDGenSeedResponse : GPBMessage

/**
 * *
 * cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
 * cipher seed obtained by the user. This field is optional, as if not
 * provided, then the daemon will generate a new cipher seed for the user.
 * Otherwise, then the daemon will attempt to recover the wallet state linked
 * to this cipher seed.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *cipherSeedMnemonicArray;
/** The number of items in @c cipherSeedMnemonicArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger cipherSeedMnemonicArray_Count;

/**
 * *
 * enciphered_seed are the raw aezeed cipher seed bytes. This is the raw
 * cipher text before run through our mnemonic encoding scheme.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *encipheredSeed;

@end

#pragma mark - LNDInitWalletRequest

typedef GPB_ENUM(LNDInitWalletRequest_FieldNumber) {
  LNDInitWalletRequest_FieldNumber_WalletPassword = 1,
  LNDInitWalletRequest_FieldNumber_CipherSeedMnemonicArray = 2,
  LNDInitWalletRequest_FieldNumber_AezeedPassphrase = 3,
  LNDInitWalletRequest_FieldNumber_RecoveryWindow = 4,
};

@interface LNDInitWalletRequest : GPBMessage

/**
 * *
 * wallet_password is the passphrase that should be used to encrypt the
 * wallet. This MUST be at least 8 chars in length. After creation, this
 * password is required to unlock the daemon.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *walletPassword;

/**
 * *
 * cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
 * cipher seed obtained by the user. This may have been generated by the
 * GenSeed method, or be an existing seed.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *cipherSeedMnemonicArray;
/** The number of items in @c cipherSeedMnemonicArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger cipherSeedMnemonicArray_Count;

/**
 * *
 * aezeed_passphrase is an optional user provided passphrase that will be used
 * to encrypt the generated aezeed cipher seed.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *aezeedPassphrase;

/**
 * *
 * recovery_window is an optional argument specifying the address lookahead
 * when restoring a wallet seed. The recovery window applies to each
 * invdividual branch of the BIP44 derivation paths. Supplying a recovery
 * window of zero indicates that no addresses should be recovered, such after
 * the first initialization of the wallet.
 **/
@property(nonatomic, readwrite) int32_t recoveryWindow;

@end

#pragma mark - LNDInitWalletResponse

@interface LNDInitWalletResponse : GPBMessage

@end

#pragma mark - LNDUnlockWalletRequest

typedef GPB_ENUM(LNDUnlockWalletRequest_FieldNumber) {
  LNDUnlockWalletRequest_FieldNumber_WalletPassword = 1,
  LNDUnlockWalletRequest_FieldNumber_RecoveryWindow = 2,
};

@interface LNDUnlockWalletRequest : GPBMessage

/**
 * *
 * wallet_password should be the current valid passphrase for the daemon. This
 * will be required to decrypt on-disk material that the daemon requires to
 * function properly.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *walletPassword;

/**
 * *
 * recovery_window is an optional argument specifying the address lookahead
 * when restoring a wallet seed. The recovery window applies to each
 * invdividual branch of the BIP44 derivation paths. Supplying a recovery
 * window of zero indicates that no addresses should be recovered, such after
 * the first initialization of the wallet.
 **/
@property(nonatomic, readwrite) int32_t recoveryWindow;

@end

#pragma mark - LNDUnlockWalletResponse

@interface LNDUnlockWalletResponse : GPBMessage

@end

#pragma mark - LNDChangePasswordRequest

typedef GPB_ENUM(LNDChangePasswordRequest_FieldNumber) {
  LNDChangePasswordRequest_FieldNumber_CurrentPassword = 1,
  LNDChangePasswordRequest_FieldNumber_NewPassword = 2,
};

@interface LNDChangePasswordRequest : GPBMessage

/**
 * *
 * current_password should be the current valid passphrase used to unlock the
 * daemon.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *currentPassword;

/**
 * *
 * new_password should be the new passphrase that will be needed to unlock the
 * daemon.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *newPassword NS_RETURNS_NOT_RETAINED;

@end

#pragma mark - LNDChangePasswordResponse

@interface LNDChangePasswordResponse : GPBMessage

@end

#pragma mark - LNDUtxo

typedef GPB_ENUM(LNDUtxo_FieldNumber) {
  LNDUtxo_FieldNumber_Type = 1,
  LNDUtxo_FieldNumber_Address = 2,
  LNDUtxo_FieldNumber_AmountSat = 3,
  LNDUtxo_FieldNumber_ScriptPubkey = 4,
  LNDUtxo_FieldNumber_Outpoint = 5,
  LNDUtxo_FieldNumber_Confirmations = 6,
};

@interface LNDUtxo : GPBMessage

/** / The type of address */
@property(nonatomic, readwrite) LNDAddressType type;

/** / The address */
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

/** / The value of the unspent coin in satoshis */
@property(nonatomic, readwrite) int64_t amountSat;

/** / The scriptpubkey in hex */
@property(nonatomic, readwrite, copy, null_resettable) NSString *scriptPubkey;

/**
 * / The outpoint in format txid:n
 * / Note that this reuses the `ChannelPoint` message but
 * / is not actually a channel related outpoint, of course
 **/
@property(nonatomic, readwrite, strong, null_resettable) LNDChannelPoint *outpoint;
/** Test to see if @c outpoint has been set. */
@property(nonatomic, readwrite) BOOL hasOutpoint;

/** / The number of confirmations for the Utxo */
@property(nonatomic, readwrite) int64_t confirmations;

@end

/**
 * Fetches the raw value of a @c LNDUtxo's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t LNDUtxo_Type_RawValue(LNDUtxo *message);
/**
 * Sets the raw value of an @c LNDUtxo's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetLNDUtxo_Type_RawValue(LNDUtxo *message, int32_t value);

#pragma mark - LNDTransaction

typedef GPB_ENUM(LNDTransaction_FieldNumber) {
  LNDTransaction_FieldNumber_TxHash = 1,
  LNDTransaction_FieldNumber_Amount = 2,
  LNDTransaction_FieldNumber_NumConfirmations = 3,
  LNDTransaction_FieldNumber_BlockHash = 4,
  LNDTransaction_FieldNumber_BlockHeight = 5,
  LNDTransaction_FieldNumber_TimeStamp = 6,
  LNDTransaction_FieldNumber_TotalFees = 7,
  LNDTransaction_FieldNumber_DestAddressesArray = 8,
};

@interface LNDTransaction : GPBMessage

/** / The transaction hash */
@property(nonatomic, readwrite, copy, null_resettable) NSString *txHash;

/** / The transaction amount, denominated in satoshis */
@property(nonatomic, readwrite) int64_t amount;

/** / The number of confirmations */
@property(nonatomic, readwrite) int32_t numConfirmations;

/** / The hash of the block this transaction was included in */
@property(nonatomic, readwrite, copy, null_resettable) NSString *blockHash;

/** / The height of the block this transaction was included in */
@property(nonatomic, readwrite) int32_t blockHeight;

/** / Timestamp of this transaction */
@property(nonatomic, readwrite) int64_t timeStamp;

/** / Fees paid for this transaction */
@property(nonatomic, readwrite) int64_t totalFees;

/** / Addresses that received funds for this transaction */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *destAddressesArray;
/** The number of items in @c destAddressesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger destAddressesArray_Count;

@end

#pragma mark - LNDGetTransactionsRequest

@interface LNDGetTransactionsRequest : GPBMessage

@end

#pragma mark - LNDTransactionDetails

typedef GPB_ENUM(LNDTransactionDetails_FieldNumber) {
  LNDTransactionDetails_FieldNumber_TransactionsArray = 1,
};

@interface LNDTransactionDetails : GPBMessage

/** / The list of transactions relevant to the wallet. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDTransaction*> *transactionsArray;
/** The number of items in @c transactionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger transactionsArray_Count;

@end

#pragma mark - LNDFeeLimit

typedef GPB_ENUM(LNDFeeLimit_FieldNumber) {
  LNDFeeLimit_FieldNumber_Fixed = 1,
  LNDFeeLimit_FieldNumber_Percent = 2,
};

typedef GPB_ENUM(LNDFeeLimit_Limit_OneOfCase) {
  LNDFeeLimit_Limit_OneOfCase_GPBUnsetOneOfCase = 0,
  LNDFeeLimit_Limit_OneOfCase_Fixed = 1,
  LNDFeeLimit_Limit_OneOfCase_Percent = 2,
};

@interface LNDFeeLimit : GPBMessage

@property(nonatomic, readonly) LNDFeeLimit_Limit_OneOfCase limitOneOfCase;

/** / The fee limit expressed as a fixed amount of satoshis. */
@property(nonatomic, readwrite) int64_t fixed;

/** / The fee limit expressed as a percentage of the payment amount. */
@property(nonatomic, readwrite) int64_t percent;

@end

/**
 * Clears whatever value was set for the oneof 'limit'.
 **/
void LNDFeeLimit_ClearLimitOneOfCase(LNDFeeLimit *message);

#pragma mark - LNDSendRequest

typedef GPB_ENUM(LNDSendRequest_FieldNumber) {
  LNDSendRequest_FieldNumber_Dest = 1,
  LNDSendRequest_FieldNumber_DestString = 2,
  LNDSendRequest_FieldNumber_Amt = 3,
  LNDSendRequest_FieldNumber_PaymentHash = 4,
  LNDSendRequest_FieldNumber_PaymentHashString = 5,
  LNDSendRequest_FieldNumber_PaymentRequest = 6,
  LNDSendRequest_FieldNumber_FinalCltvDelta = 7,
  LNDSendRequest_FieldNumber_FeeLimit = 8,
};

@interface LNDSendRequest : GPBMessage

/** / The identity pubkey of the payment recipient */
@property(nonatomic, readwrite, copy, null_resettable) NSData *dest;

/** / The hex-encoded identity pubkey of the payment recipient */
@property(nonatomic, readwrite, copy, null_resettable) NSString *destString;

/** / Number of satoshis to send. */
@property(nonatomic, readwrite) int64_t amt;

/** / The hash to use within the payment's HTLC */
@property(nonatomic, readwrite, copy, null_resettable) NSData *paymentHash;

/** / The hex-encoded hash to use within the payment's HTLC */
@property(nonatomic, readwrite, copy, null_resettable) NSString *paymentHashString;

/**
 * *
 * A bare-bones invoice for a payment within the Lightning Network.  With the
 * details of the invoice, the sender has all the data necessary to send a
 * payment to the recipient.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *paymentRequest;

/**
 * *
 * The CLTV delta from the current height that should be used to set the
 * timelock for the final hop.
 **/
@property(nonatomic, readwrite) int32_t finalCltvDelta;

/**
 * *
 * The maximum number of satoshis that will be paid as a fee of the payment.
 * This value can be represented either as a percentage of the amount being
 * sent, or as a fixed amount of the maximum fee the user is willing the pay to
 * send the payment.
 **/
@property(nonatomic, readwrite, strong, null_resettable) LNDFeeLimit *feeLimit;
/** Test to see if @c feeLimit has been set. */
@property(nonatomic, readwrite) BOOL hasFeeLimit;

@end

#pragma mark - LNDSendResponse

typedef GPB_ENUM(LNDSendResponse_FieldNumber) {
  LNDSendResponse_FieldNumber_PaymentError = 1,
  LNDSendResponse_FieldNumber_PaymentPreimage = 2,
  LNDSendResponse_FieldNumber_PaymentRoute = 3,
  LNDSendResponse_FieldNumber_PaymentHash = 4,
};

@interface LNDSendResponse : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *paymentError;

@property(nonatomic, readwrite, copy, null_resettable) NSData *paymentPreimage;

@property(nonatomic, readwrite, strong, null_resettable) LNDRoute *paymentRoute;
/** Test to see if @c paymentRoute has been set. */
@property(nonatomic, readwrite) BOOL hasPaymentRoute;

@property(nonatomic, readwrite, copy, null_resettable) NSData *paymentHash;

@end

#pragma mark - LNDSendToRouteRequest

typedef GPB_ENUM(LNDSendToRouteRequest_FieldNumber) {
  LNDSendToRouteRequest_FieldNumber_PaymentHash = 1,
  LNDSendToRouteRequest_FieldNumber_PaymentHashString = 2,
  LNDSendToRouteRequest_FieldNumber_RoutesArray = 3,
};

@interface LNDSendToRouteRequest : GPBMessage

/** / The payment hash to use for the HTLC. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *paymentHash;

/** / An optional hex-encoded payment hash to be used for the HTLC. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *paymentHashString;

/** / The set of routes that should be used to attempt to complete the payment. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDRoute*> *routesArray;
/** The number of items in @c routesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger routesArray_Count;

@end

#pragma mark - LNDChannelPoint

typedef GPB_ENUM(LNDChannelPoint_FieldNumber) {
  LNDChannelPoint_FieldNumber_FundingTxidBytes = 1,
  LNDChannelPoint_FieldNumber_FundingTxidStr = 2,
  LNDChannelPoint_FieldNumber_OutputIndex = 3,
};

typedef GPB_ENUM(LNDChannelPoint_FundingTxid_OneOfCase) {
  LNDChannelPoint_FundingTxid_OneOfCase_GPBUnsetOneOfCase = 0,
  LNDChannelPoint_FundingTxid_OneOfCase_FundingTxidBytes = 1,
  LNDChannelPoint_FundingTxid_OneOfCase_FundingTxidStr = 2,
};

@interface LNDChannelPoint : GPBMessage

@property(nonatomic, readonly) LNDChannelPoint_FundingTxid_OneOfCase fundingTxidOneOfCase;

/** / Txid of the funding transaction */
@property(nonatomic, readwrite, copy, null_resettable) NSData *fundingTxidBytes;

/** / Hex-encoded string representing the funding transaction */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fundingTxidStr;

/** / The index of the output of the funding transaction */
@property(nonatomic, readwrite) uint32_t outputIndex;

@end

/**
 * Clears whatever value was set for the oneof 'fundingTxid'.
 **/
void LNDChannelPoint_ClearFundingTxidOneOfCase(LNDChannelPoint *message);

#pragma mark - LNDLightningAddress

typedef GPB_ENUM(LNDLightningAddress_FieldNumber) {
  LNDLightningAddress_FieldNumber_Pubkey = 1,
  LNDLightningAddress_FieldNumber_Host = 2,
};

@interface LNDLightningAddress : GPBMessage

/** / The identity pubkey of the Lightning node */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pubkey;

/** / The network location of the lightning node, e.g. `69.69.69.69:1337` or `localhost:10011` */
@property(nonatomic, readwrite, copy, null_resettable) NSString *host;

@end

#pragma mark - LNDSendManyRequest

typedef GPB_ENUM(LNDSendManyRequest_FieldNumber) {
  LNDSendManyRequest_FieldNumber_AddrToAmount = 1,
  LNDSendManyRequest_FieldNumber_TargetConf = 3,
  LNDSendManyRequest_FieldNumber_SatPerByte = 5,
};

@interface LNDSendManyRequest : GPBMessage

/** / The map from addresses to amounts */
@property(nonatomic, readwrite, strong, null_resettable) GPBStringInt64Dictionary *addrToAmount;
/** The number of items in @c addrToAmount without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger addrToAmount_Count;

/** / The target number of blocks that this transaction should be confirmed by. */
@property(nonatomic, readwrite) int32_t targetConf;

/** / A manual fee rate set in sat/byte that should be used when crafting the transaction. */
@property(nonatomic, readwrite) int64_t satPerByte;

@end

#pragma mark - LNDSendManyResponse

typedef GPB_ENUM(LNDSendManyResponse_FieldNumber) {
  LNDSendManyResponse_FieldNumber_Txid = 1,
};

@interface LNDSendManyResponse : GPBMessage

/** / The id of the transaction */
@property(nonatomic, readwrite, copy, null_resettable) NSString *txid;

@end

#pragma mark - LNDSendCoinsRequest

typedef GPB_ENUM(LNDSendCoinsRequest_FieldNumber) {
  LNDSendCoinsRequest_FieldNumber_Addr = 1,
  LNDSendCoinsRequest_FieldNumber_Amount = 2,
  LNDSendCoinsRequest_FieldNumber_TargetConf = 3,
  LNDSendCoinsRequest_FieldNumber_SatPerByte = 5,
  LNDSendCoinsRequest_FieldNumber_SendAll = 6,
};

@interface LNDSendCoinsRequest : GPBMessage

/** / The address to send coins to */
@property(nonatomic, readwrite, copy, null_resettable) NSString *addr;

/** / The amount in satoshis to send */
@property(nonatomic, readwrite) int64_t amount;

/** / The target number of blocks that this transaction should be confirmed by. */
@property(nonatomic, readwrite) int32_t targetConf;

/** / A manual fee rate set in sat/byte that should be used when crafting the transaction. */
@property(nonatomic, readwrite) int64_t satPerByte;

/**
 * *
 * If set, then the amount field will be ignored, and lnd will attempt to
 * send all the coins under control of the internal wallet to the specified
 * address.
 **/
@property(nonatomic, readwrite) BOOL sendAll;

@end

#pragma mark - LNDSendCoinsResponse

typedef GPB_ENUM(LNDSendCoinsResponse_FieldNumber) {
  LNDSendCoinsResponse_FieldNumber_Txid = 1,
};

@interface LNDSendCoinsResponse : GPBMessage

/** / The transaction ID of the transaction */
@property(nonatomic, readwrite, copy, null_resettable) NSString *txid;

@end

#pragma mark - LNDListUnspentRequest

typedef GPB_ENUM(LNDListUnspentRequest_FieldNumber) {
  LNDListUnspentRequest_FieldNumber_MinConfs = 1,
  LNDListUnspentRequest_FieldNumber_MaxConfs = 2,
};

@interface LNDListUnspentRequest : GPBMessage

/** / The minimum number of confirmations to be included. */
@property(nonatomic, readwrite) int32_t minConfs;

/** / The maximum number of confirmations to be included. */
@property(nonatomic, readwrite) int32_t maxConfs;

@end

#pragma mark - LNDListUnspentResponse

typedef GPB_ENUM(LNDListUnspentResponse_FieldNumber) {
  LNDListUnspentResponse_FieldNumber_UtxosArray = 1,
};

@interface LNDListUnspentResponse : GPBMessage

/** / A list of utxos */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDUtxo*> *utxosArray;
/** The number of items in @c utxosArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger utxosArray_Count;

@end

#pragma mark - LNDNewAddressRequest

typedef GPB_ENUM(LNDNewAddressRequest_FieldNumber) {
  LNDNewAddressRequest_FieldNumber_Type = 1,
};

@interface LNDNewAddressRequest : GPBMessage

/** / The address type */
@property(nonatomic, readwrite) LNDAddressType type;

@end

/**
 * Fetches the raw value of a @c LNDNewAddressRequest's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t LNDNewAddressRequest_Type_RawValue(LNDNewAddressRequest *message);
/**
 * Sets the raw value of an @c LNDNewAddressRequest's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetLNDNewAddressRequest_Type_RawValue(LNDNewAddressRequest *message, int32_t value);

#pragma mark - LNDNewAddressResponse

typedef GPB_ENUM(LNDNewAddressResponse_FieldNumber) {
  LNDNewAddressResponse_FieldNumber_Address = 1,
};

@interface LNDNewAddressResponse : GPBMessage

/** / The newly generated wallet address */
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

@end

#pragma mark - LNDSignMessageRequest

typedef GPB_ENUM(LNDSignMessageRequest_FieldNumber) {
  LNDSignMessageRequest_FieldNumber_Msg = 1,
};

@interface LNDSignMessageRequest : GPBMessage

/** / The message to be signed */
@property(nonatomic, readwrite, copy, null_resettable) NSData *msg;

@end

#pragma mark - LNDSignMessageResponse

typedef GPB_ENUM(LNDSignMessageResponse_FieldNumber) {
  LNDSignMessageResponse_FieldNumber_Signature = 1,
};

@interface LNDSignMessageResponse : GPBMessage

/** / The signature for the given message */
@property(nonatomic, readwrite, copy, null_resettable) NSString *signature;

@end

#pragma mark - LNDVerifyMessageRequest

typedef GPB_ENUM(LNDVerifyMessageRequest_FieldNumber) {
  LNDVerifyMessageRequest_FieldNumber_Msg = 1,
  LNDVerifyMessageRequest_FieldNumber_Signature = 2,
};

@interface LNDVerifyMessageRequest : GPBMessage

/** / The message over which the signature is to be verified */
@property(nonatomic, readwrite, copy, null_resettable) NSData *msg;

/** / The signature to be verified over the given message */
@property(nonatomic, readwrite, copy, null_resettable) NSString *signature;

@end

#pragma mark - LNDVerifyMessageResponse

typedef GPB_ENUM(LNDVerifyMessageResponse_FieldNumber) {
  LNDVerifyMessageResponse_FieldNumber_Valid = 1,
  LNDVerifyMessageResponse_FieldNumber_Pubkey = 2,
};

@interface LNDVerifyMessageResponse : GPBMessage

/** / Whether the signature was valid over the given message */
@property(nonatomic, readwrite) BOOL valid;

/** / The pubkey recovered from the signature */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pubkey;

@end

#pragma mark - LNDConnectPeerRequest

typedef GPB_ENUM(LNDConnectPeerRequest_FieldNumber) {
  LNDConnectPeerRequest_FieldNumber_Addr = 1,
  LNDConnectPeerRequest_FieldNumber_Perm = 2,
};

@interface LNDConnectPeerRequest : GPBMessage

/** / Lightning address of the peer, in the format `<pubkey>\@host` */
@property(nonatomic, readwrite, strong, null_resettable) LNDLightningAddress *addr;
/** Test to see if @c addr has been set. */
@property(nonatomic, readwrite) BOOL hasAddr;

/**
 * * If set, the daemon will attempt to persistently connect to the target
 * peer.  Otherwise, the call will be synchronous.
 **/
@property(nonatomic, readwrite) BOOL perm;

@end

#pragma mark - LNDConnectPeerResponse

@interface LNDConnectPeerResponse : GPBMessage

@end

#pragma mark - LNDDisconnectPeerRequest

typedef GPB_ENUM(LNDDisconnectPeerRequest_FieldNumber) {
  LNDDisconnectPeerRequest_FieldNumber_PubKey = 1,
};

@interface LNDDisconnectPeerRequest : GPBMessage

/** / The pubkey of the node to disconnect from */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pubKey;

@end

#pragma mark - LNDDisconnectPeerResponse

@interface LNDDisconnectPeerResponse : GPBMessage

@end

#pragma mark - LNDHTLC

typedef GPB_ENUM(LNDHTLC_FieldNumber) {
  LNDHTLC_FieldNumber_Incoming = 1,
  LNDHTLC_FieldNumber_Amount = 2,
  LNDHTLC_FieldNumber_HashLock = 3,
  LNDHTLC_FieldNumber_ExpirationHeight = 4,
};

@interface LNDHTLC : GPBMessage

@property(nonatomic, readwrite) BOOL incoming;

@property(nonatomic, readwrite) int64_t amount;

@property(nonatomic, readwrite, copy, null_resettable) NSData *hashLock;

@property(nonatomic, readwrite) uint32_t expirationHeight;

@end

#pragma mark - LNDChannel

typedef GPB_ENUM(LNDChannel_FieldNumber) {
  LNDChannel_FieldNumber_Active = 1,
  LNDChannel_FieldNumber_RemotePubkey = 2,
  LNDChannel_FieldNumber_ChannelPoint = 3,
  LNDChannel_FieldNumber_ChanId = 4,
  LNDChannel_FieldNumber_Capacity = 5,
  LNDChannel_FieldNumber_LocalBalance = 6,
  LNDChannel_FieldNumber_RemoteBalance = 7,
  LNDChannel_FieldNumber_CommitFee = 8,
  LNDChannel_FieldNumber_CommitWeight = 9,
  LNDChannel_FieldNumber_FeePerKw = 10,
  LNDChannel_FieldNumber_UnsettledBalance = 11,
  LNDChannel_FieldNumber_TotalSatoshisSent = 12,
  LNDChannel_FieldNumber_TotalSatoshisReceived = 13,
  LNDChannel_FieldNumber_NumUpdates = 14,
  LNDChannel_FieldNumber_PendingHtlcsArray = 15,
  LNDChannel_FieldNumber_CsvDelay = 16,
  LNDChannel_FieldNumber_Private_p = 17,
  LNDChannel_FieldNumber_Initiator = 18,
};

@interface LNDChannel : GPBMessage

/** / Whether this channel is active or not */
@property(nonatomic, readwrite) BOOL active;

/** / The identity pubkey of the remote node */
@property(nonatomic, readwrite, copy, null_resettable) NSString *remotePubkey;

/**
 * *
 * The outpoint (txid:index) of the funding transaction. With this value, Bob
 * will be able to generate a signature for Alice's version of the commitment
 * transaction.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *channelPoint;

/**
 * *
 * The unique channel ID for the channel. The first 3 bytes are the block
 * height, the next 3 the index within the block, and the last 2 bytes are the
 * output index for the channel.
 **/
@property(nonatomic, readwrite) uint64_t chanId;

/** / The total amount of funds held in this channel */
@property(nonatomic, readwrite) int64_t capacity;

/** / This node's current balance in this channel */
@property(nonatomic, readwrite) int64_t localBalance;

/** / The counterparty's current balance in this channel */
@property(nonatomic, readwrite) int64_t remoteBalance;

/**
 * *
 * The amount calculated to be paid in fees for the current set of commitment
 * transactions. The fee amount is persisted with the channel in order to
 * allow the fee amount to be removed and recalculated with each channel state
 * update, including updates that happen after a system restart.
 **/
@property(nonatomic, readwrite) int64_t commitFee;

/** / The weight of the commitment transaction */
@property(nonatomic, readwrite) int64_t commitWeight;

/**
 * *
 * The required number of satoshis per kilo-weight that the requester will pay
 * at all times, for both the funding transaction and commitment transaction.
 * This value can later be updated once the channel is open.
 **/
@property(nonatomic, readwrite) int64_t feePerKw;

/** / The unsettled balance in this channel */
@property(nonatomic, readwrite) int64_t unsettledBalance;

/**
 * *
 * The total number of satoshis we've sent within this channel.
 **/
@property(nonatomic, readwrite) int64_t totalSatoshisSent;

/**
 * *
 * The total number of satoshis we've received within this channel.
 **/
@property(nonatomic, readwrite) int64_t totalSatoshisReceived;

/**
 * *
 * The total number of updates conducted within this channel.
 **/
@property(nonatomic, readwrite) uint64_t numUpdates;

/**
 * *
 * The list of active, uncleared HTLCs currently pending within the channel.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDHTLC*> *pendingHtlcsArray;
/** The number of items in @c pendingHtlcsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger pendingHtlcsArray_Count;

/**
 * *
 * The CSV delay expressed in relative blocks. If the channel is force
 * closed, we'll need to wait for this many blocks before we can regain our
 * funds.
 **/
@property(nonatomic, readwrite) uint32_t csvDelay;

/** / Whether this channel is advertised to the network or not. */
@property(nonatomic, readwrite) BOOL private_p;

/** / True if we were the ones that creted the channel. */
@property(nonatomic, readwrite) BOOL initiator;

@end

#pragma mark - LNDListChannelsRequest

typedef GPB_ENUM(LNDListChannelsRequest_FieldNumber) {
  LNDListChannelsRequest_FieldNumber_ActiveOnly = 1,
  LNDListChannelsRequest_FieldNumber_InactiveOnly = 2,
  LNDListChannelsRequest_FieldNumber_PublicOnly = 3,
  LNDListChannelsRequest_FieldNumber_PrivateOnly = 4,
};

@interface LNDListChannelsRequest : GPBMessage

@property(nonatomic, readwrite) BOOL activeOnly;

@property(nonatomic, readwrite) BOOL inactiveOnly;

@property(nonatomic, readwrite) BOOL publicOnly;

@property(nonatomic, readwrite) BOOL privateOnly;

@end

#pragma mark - LNDListChannelsResponse

typedef GPB_ENUM(LNDListChannelsResponse_FieldNumber) {
  LNDListChannelsResponse_FieldNumber_ChannelsArray = 11,
};

@interface LNDListChannelsResponse : GPBMessage

/** / The list of active channels */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDChannel*> *channelsArray;
/** The number of items in @c channelsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger channelsArray_Count;

@end

#pragma mark - LNDChannelCloseSummary

typedef GPB_ENUM(LNDChannelCloseSummary_FieldNumber) {
  LNDChannelCloseSummary_FieldNumber_ChannelPoint = 1,
  LNDChannelCloseSummary_FieldNumber_ChanId = 2,
  LNDChannelCloseSummary_FieldNumber_ChainHash = 3,
  LNDChannelCloseSummary_FieldNumber_ClosingTxHash = 4,
  LNDChannelCloseSummary_FieldNumber_RemotePubkey = 5,
  LNDChannelCloseSummary_FieldNumber_Capacity = 6,
  LNDChannelCloseSummary_FieldNumber_CloseHeight = 7,
  LNDChannelCloseSummary_FieldNumber_SettledBalance = 8,
  LNDChannelCloseSummary_FieldNumber_TimeLockedBalance = 9,
  LNDChannelCloseSummary_FieldNumber_CloseType = 10,
};

@interface LNDChannelCloseSummary : GPBMessage

/** / The outpoint (txid:index) of the funding transaction. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *channelPoint;

/** /  The unique channel ID for the channel. */
@property(nonatomic, readwrite) uint64_t chanId;

/** / The hash of the genesis block that this channel resides within. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *chainHash;

/** / The txid of the transaction which ultimately closed this channel. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *closingTxHash;

/** / Public key of the remote peer that we formerly had a channel with. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *remotePubkey;

/** / Total capacity of the channel. */
@property(nonatomic, readwrite) int64_t capacity;

/** / Height at which the funding transaction was spent. */
@property(nonatomic, readwrite) uint32_t closeHeight;

/** / Settled balance at the time of channel closure */
@property(nonatomic, readwrite) int64_t settledBalance;

/** / The sum of all the time-locked outputs at the time of channel closure */
@property(nonatomic, readwrite) int64_t timeLockedBalance;

/** / Details on how the channel was closed. */
@property(nonatomic, readwrite) LNDChannelCloseSummary_ClosureType closeType;

@end

/**
 * Fetches the raw value of a @c LNDChannelCloseSummary's @c closeType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t LNDChannelCloseSummary_CloseType_RawValue(LNDChannelCloseSummary *message);
/**
 * Sets the raw value of an @c LNDChannelCloseSummary's @c closeType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetLNDChannelCloseSummary_CloseType_RawValue(LNDChannelCloseSummary *message, int32_t value);

#pragma mark - LNDClosedChannelsRequest

typedef GPB_ENUM(LNDClosedChannelsRequest_FieldNumber) {
  LNDClosedChannelsRequest_FieldNumber_Cooperative = 1,
  LNDClosedChannelsRequest_FieldNumber_LocalForce = 2,
  LNDClosedChannelsRequest_FieldNumber_RemoteForce = 3,
  LNDClosedChannelsRequest_FieldNumber_Breach = 4,
  LNDClosedChannelsRequest_FieldNumber_FundingCanceled = 5,
  LNDClosedChannelsRequest_FieldNumber_Abandoned = 6,
};

@interface LNDClosedChannelsRequest : GPBMessage

@property(nonatomic, readwrite) BOOL cooperative;

@property(nonatomic, readwrite) BOOL localForce;

@property(nonatomic, readwrite) BOOL remoteForce;

@property(nonatomic, readwrite) BOOL breach;

@property(nonatomic, readwrite) BOOL fundingCanceled;

@property(nonatomic, readwrite) BOOL abandoned;

@end

#pragma mark - LNDClosedChannelsResponse

typedef GPB_ENUM(LNDClosedChannelsResponse_FieldNumber) {
  LNDClosedChannelsResponse_FieldNumber_ChannelsArray = 1,
};

@interface LNDClosedChannelsResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDChannelCloseSummary*> *channelsArray;
/** The number of items in @c channelsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger channelsArray_Count;

@end

#pragma mark - LNDPeer

typedef GPB_ENUM(LNDPeer_FieldNumber) {
  LNDPeer_FieldNumber_PubKey = 1,
  LNDPeer_FieldNumber_Address = 3,
  LNDPeer_FieldNumber_BytesSent = 4,
  LNDPeer_FieldNumber_BytesRecv = 5,
  LNDPeer_FieldNumber_SatSent = 6,
  LNDPeer_FieldNumber_SatRecv = 7,
  LNDPeer_FieldNumber_Inbound = 8,
  LNDPeer_FieldNumber_PingTime = 9,
};

@interface LNDPeer : GPBMessage

/** / The identity pubkey of the peer */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pubKey;

/** / Network address of the peer; eg `127.0.0.1:10011` */
@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

/** / Bytes of data transmitted to this peer */
@property(nonatomic, readwrite) uint64_t bytesSent;

/** / Bytes of data transmitted from this peer */
@property(nonatomic, readwrite) uint64_t bytesRecv;

/** / Satoshis sent to this peer */
@property(nonatomic, readwrite) int64_t satSent;

/** / Satoshis received from this peer */
@property(nonatomic, readwrite) int64_t satRecv;

/** / A channel is inbound if the counterparty initiated the channel */
@property(nonatomic, readwrite) BOOL inbound;

/** / Ping time to this peer */
@property(nonatomic, readwrite) int64_t pingTime;

@end

#pragma mark - LNDListPeersRequest

@interface LNDListPeersRequest : GPBMessage

@end

#pragma mark - LNDListPeersResponse

typedef GPB_ENUM(LNDListPeersResponse_FieldNumber) {
  LNDListPeersResponse_FieldNumber_PeersArray = 1,
};

@interface LNDListPeersResponse : GPBMessage

/** / The list of currently connected peers */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDPeer*> *peersArray;
/** The number of items in @c peersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger peersArray_Count;

@end

#pragma mark - LNDGetInfoRequest

@interface LNDGetInfoRequest : GPBMessage

@end

#pragma mark - LNDGetInfoResponse

typedef GPB_ENUM(LNDGetInfoResponse_FieldNumber) {
  LNDGetInfoResponse_FieldNumber_IdentityPubkey = 1,
  LNDGetInfoResponse_FieldNumber_Alias = 2,
  LNDGetInfoResponse_FieldNumber_NumPendingChannels = 3,
  LNDGetInfoResponse_FieldNumber_NumActiveChannels = 4,
  LNDGetInfoResponse_FieldNumber_NumPeers = 5,
  LNDGetInfoResponse_FieldNumber_BlockHeight = 6,
  LNDGetInfoResponse_FieldNumber_BlockHash = 8,
  LNDGetInfoResponse_FieldNumber_SyncedToChain = 9,
  LNDGetInfoResponse_FieldNumber_Testnet = 10,
  LNDGetInfoResponse_FieldNumber_UrisArray = 12,
  LNDGetInfoResponse_FieldNumber_BestHeaderTimestamp = 13,
  LNDGetInfoResponse_FieldNumber_Version = 14,
  LNDGetInfoResponse_FieldNumber_NumInactiveChannels = 15,
  LNDGetInfoResponse_FieldNumber_ChainsArray = 16,
};

@interface LNDGetInfoResponse : GPBMessage

/** / The identity pubkey of the current node. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *identityPubkey;

/** / If applicable, the alias of the current node, e.g. "bob" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *alias;

/** / Number of pending channels */
@property(nonatomic, readwrite) uint32_t numPendingChannels;

/** / Number of active channels */
@property(nonatomic, readwrite) uint32_t numActiveChannels;

/** / Number of peers */
@property(nonatomic, readwrite) uint32_t numPeers;

/** / The node's current view of the height of the best block */
@property(nonatomic, readwrite) uint32_t blockHeight;

/** / The node's current view of the hash of the best block */
@property(nonatomic, readwrite, copy, null_resettable) NSString *blockHash;

/** / Whether the wallet's view is synced to the main chain */
@property(nonatomic, readwrite) BOOL syncedToChain;

/**
 * *
 * Whether the current node is connected to testnet. This field is
 * deprecated and the network field should be used instead
 **/
@property(nonatomic, readwrite) BOOL testnet DEPRECATED_ATTRIBUTE;

/** / The URIs of the current node. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *urisArray;
/** The number of items in @c urisArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger urisArray_Count;

/** / Timestamp of the block best known to the wallet */
@property(nonatomic, readwrite) int64_t bestHeaderTimestamp;

/** / The version of the LND software that the node is running. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *version;

/** / Number of inactive channels */
@property(nonatomic, readwrite) uint32_t numInactiveChannels;

/** / A list of active chains the node is connected to */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDChain*> *chainsArray;
/** The number of items in @c chainsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger chainsArray_Count;

@end

#pragma mark - LNDChain

typedef GPB_ENUM(LNDChain_FieldNumber) {
  LNDChain_FieldNumber_Chain = 1,
  LNDChain_FieldNumber_Network = 2,
};

@interface LNDChain : GPBMessage

/** / The blockchain the node is on (eg bitcoin, litecoin) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *chain;

/** / The network the node is on (eg regtest, testnet, mainnet) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *network;

@end

#pragma mark - LNDConfirmationUpdate

typedef GPB_ENUM(LNDConfirmationUpdate_FieldNumber) {
  LNDConfirmationUpdate_FieldNumber_BlockSha = 1,
  LNDConfirmationUpdate_FieldNumber_BlockHeight = 2,
  LNDConfirmationUpdate_FieldNumber_NumConfsLeft = 3,
};

@interface LNDConfirmationUpdate : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *blockSha;

@property(nonatomic, readwrite) int32_t blockHeight;

@property(nonatomic, readwrite) uint32_t numConfsLeft;

@end

#pragma mark - LNDChannelOpenUpdate

typedef GPB_ENUM(LNDChannelOpenUpdate_FieldNumber) {
  LNDChannelOpenUpdate_FieldNumber_ChannelPoint = 1,
};

@interface LNDChannelOpenUpdate : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) LNDChannelPoint *channelPoint;
/** Test to see if @c channelPoint has been set. */
@property(nonatomic, readwrite) BOOL hasChannelPoint;

@end

#pragma mark - LNDChannelCloseUpdate

typedef GPB_ENUM(LNDChannelCloseUpdate_FieldNumber) {
  LNDChannelCloseUpdate_FieldNumber_ClosingTxid = 1,
  LNDChannelCloseUpdate_FieldNumber_Success = 2,
};

@interface LNDChannelCloseUpdate : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *closingTxid;

@property(nonatomic, readwrite) BOOL success;

@end

#pragma mark - LNDCloseChannelRequest

typedef GPB_ENUM(LNDCloseChannelRequest_FieldNumber) {
  LNDCloseChannelRequest_FieldNumber_ChannelPoint = 1,
  LNDCloseChannelRequest_FieldNumber_Force = 2,
  LNDCloseChannelRequest_FieldNumber_TargetConf = 3,
  LNDCloseChannelRequest_FieldNumber_SatPerByte = 4,
};

@interface LNDCloseChannelRequest : GPBMessage

/**
 * *
 * The outpoint (txid:index) of the funding transaction. With this value, Bob
 * will be able to generate a signature for Alice's version of the commitment
 * transaction.
 **/
@property(nonatomic, readwrite, strong, null_resettable) LNDChannelPoint *channelPoint;
/** Test to see if @c channelPoint has been set. */
@property(nonatomic, readwrite) BOOL hasChannelPoint;

/** / If true, then the channel will be closed forcibly. This means the current commitment transaction will be signed and broadcast. */
@property(nonatomic, readwrite) BOOL force;

/** / The target number of blocks that the closure transaction should be confirmed by. */
@property(nonatomic, readwrite) int32_t targetConf;

/** / A manual fee rate set in sat/byte that should be used when crafting the closure transaction. */
@property(nonatomic, readwrite) int64_t satPerByte;

@end

#pragma mark - LNDCloseStatusUpdate

typedef GPB_ENUM(LNDCloseStatusUpdate_FieldNumber) {
  LNDCloseStatusUpdate_FieldNumber_ClosePending = 1,
  LNDCloseStatusUpdate_FieldNumber_ChanClose = 3,
};

typedef GPB_ENUM(LNDCloseStatusUpdate_Update_OneOfCase) {
  LNDCloseStatusUpdate_Update_OneOfCase_GPBUnsetOneOfCase = 0,
  LNDCloseStatusUpdate_Update_OneOfCase_ClosePending = 1,
  LNDCloseStatusUpdate_Update_OneOfCase_ChanClose = 3,
};

@interface LNDCloseStatusUpdate : GPBMessage

@property(nonatomic, readonly) LNDCloseStatusUpdate_Update_OneOfCase updateOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) LNDPendingUpdate *closePending;

@property(nonatomic, readwrite, strong, null_resettable) LNDChannelCloseUpdate *chanClose;

@end

/**
 * Clears whatever value was set for the oneof 'update'.
 **/
void LNDCloseStatusUpdate_ClearUpdateOneOfCase(LNDCloseStatusUpdate *message);

#pragma mark - LNDPendingUpdate

typedef GPB_ENUM(LNDPendingUpdate_FieldNumber) {
  LNDPendingUpdate_FieldNumber_Txid = 1,
  LNDPendingUpdate_FieldNumber_OutputIndex = 2,
};

@interface LNDPendingUpdate : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *txid;

@property(nonatomic, readwrite) uint32_t outputIndex;

@end

#pragma mark - LNDOpenChannelRequest

typedef GPB_ENUM(LNDOpenChannelRequest_FieldNumber) {
  LNDOpenChannelRequest_FieldNumber_NodePubkey = 2,
  LNDOpenChannelRequest_FieldNumber_NodePubkeyString = 3,
  LNDOpenChannelRequest_FieldNumber_LocalFundingAmount = 4,
  LNDOpenChannelRequest_FieldNumber_PushSat = 5,
  LNDOpenChannelRequest_FieldNumber_TargetConf = 6,
  LNDOpenChannelRequest_FieldNumber_SatPerByte = 7,
  LNDOpenChannelRequest_FieldNumber_Private_p = 8,
  LNDOpenChannelRequest_FieldNumber_MinHtlcMsat = 9,
  LNDOpenChannelRequest_FieldNumber_RemoteCsvDelay = 10,
  LNDOpenChannelRequest_FieldNumber_MinConfs = 11,
  LNDOpenChannelRequest_FieldNumber_SpendUnconfirmed = 12,
};

@interface LNDOpenChannelRequest : GPBMessage

/** / The pubkey of the node to open a channel with */
@property(nonatomic, readwrite, copy, null_resettable) NSData *nodePubkey;

/** / The hex encoded pubkey of the node to open a channel with */
@property(nonatomic, readwrite, copy, null_resettable) NSString *nodePubkeyString;

/** / The number of satoshis the wallet should commit to the channel */
@property(nonatomic, readwrite) int64_t localFundingAmount;

/** / The number of satoshis to push to the remote side as part of the initial commitment state */
@property(nonatomic, readwrite) int64_t pushSat;

/** / The target number of blocks that the funding transaction should be confirmed by. */
@property(nonatomic, readwrite) int32_t targetConf;

/** / A manual fee rate set in sat/byte that should be used when crafting the funding transaction. */
@property(nonatomic, readwrite) int64_t satPerByte;

/** / Whether this channel should be private, not announced to the greater network. */
@property(nonatomic, readwrite) BOOL private_p;

/** / The minimum value in millisatoshi we will require for incoming HTLCs on the channel. */
@property(nonatomic, readwrite) int64_t minHtlcMsat;

/** / The delay we require on the remote's commitment transaction. If this is not set, it will be scaled automatically with the channel size. */
@property(nonatomic, readwrite) uint32_t remoteCsvDelay;

/** / The minimum number of confirmations each one of your outputs used for the funding transaction must satisfy. */
@property(nonatomic, readwrite) int32_t minConfs;

/** / Whether unconfirmed outputs should be used as inputs for the funding transaction. */
@property(nonatomic, readwrite) BOOL spendUnconfirmed;

@end

#pragma mark - LNDOpenStatusUpdate

typedef GPB_ENUM(LNDOpenStatusUpdate_FieldNumber) {
  LNDOpenStatusUpdate_FieldNumber_ChanPending = 1,
  LNDOpenStatusUpdate_FieldNumber_ChanOpen = 3,
};

typedef GPB_ENUM(LNDOpenStatusUpdate_Update_OneOfCase) {
  LNDOpenStatusUpdate_Update_OneOfCase_GPBUnsetOneOfCase = 0,
  LNDOpenStatusUpdate_Update_OneOfCase_ChanPending = 1,
  LNDOpenStatusUpdate_Update_OneOfCase_ChanOpen = 3,
};

@interface LNDOpenStatusUpdate : GPBMessage

@property(nonatomic, readonly) LNDOpenStatusUpdate_Update_OneOfCase updateOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) LNDPendingUpdate *chanPending;

@property(nonatomic, readwrite, strong, null_resettable) LNDChannelOpenUpdate *chanOpen;

@end

/**
 * Clears whatever value was set for the oneof 'update'.
 **/
void LNDOpenStatusUpdate_ClearUpdateOneOfCase(LNDOpenStatusUpdate *message);

#pragma mark - LNDPendingHTLC

typedef GPB_ENUM(LNDPendingHTLC_FieldNumber) {
  LNDPendingHTLC_FieldNumber_Incoming = 1,
  LNDPendingHTLC_FieldNumber_Amount = 2,
  LNDPendingHTLC_FieldNumber_Outpoint = 3,
  LNDPendingHTLC_FieldNumber_MaturityHeight = 4,
  LNDPendingHTLC_FieldNumber_BlocksTilMaturity = 5,
  LNDPendingHTLC_FieldNumber_Stage = 6,
};

@interface LNDPendingHTLC : GPBMessage

/** / The direction within the channel that the htlc was sent */
@property(nonatomic, readwrite) BOOL incoming;

/** / The total value of the htlc */
@property(nonatomic, readwrite) int64_t amount;

/** / The final output to be swept back to the user's wallet */
@property(nonatomic, readwrite, copy, null_resettable) NSString *outpoint;

/** / The next block height at which we can spend the current stage */
@property(nonatomic, readwrite) uint32_t maturityHeight;

/**
 * *
 * The number of blocks remaining until the current stage can be swept.
 * Negative values indicate how many blocks have passed since becoming
 * mature.
 **/
@property(nonatomic, readwrite) int32_t blocksTilMaturity;

/** / Indicates whether the htlc is in its first or second stage of recovery */
@property(nonatomic, readwrite) uint32_t stage;

@end

#pragma mark - LNDPendingChannelsRequest

@interface LNDPendingChannelsRequest : GPBMessage

@end

#pragma mark - LNDPendingChannelsResponse

typedef GPB_ENUM(LNDPendingChannelsResponse_FieldNumber) {
  LNDPendingChannelsResponse_FieldNumber_TotalLimboBalance = 1,
  LNDPendingChannelsResponse_FieldNumber_PendingOpenChannelsArray = 2,
  LNDPendingChannelsResponse_FieldNumber_PendingClosingChannelsArray = 3,
  LNDPendingChannelsResponse_FieldNumber_PendingForceClosingChannelsArray = 4,
  LNDPendingChannelsResponse_FieldNumber_WaitingCloseChannelsArray = 5,
};

@interface LNDPendingChannelsResponse : GPBMessage

/** / The balance in satoshis encumbered in pending channels */
@property(nonatomic, readwrite) int64_t totalLimboBalance;

/** / Channels pending opening */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDPendingChannelsResponse_PendingOpenChannel*> *pendingOpenChannelsArray;
/** The number of items in @c pendingOpenChannelsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger pendingOpenChannelsArray_Count;

/** / Channels pending closing */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDPendingChannelsResponse_ClosedChannel*> *pendingClosingChannelsArray;
/** The number of items in @c pendingClosingChannelsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger pendingClosingChannelsArray_Count;

/** / Channels pending force closing */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDPendingChannelsResponse_ForceClosedChannel*> *pendingForceClosingChannelsArray;
/** The number of items in @c pendingForceClosingChannelsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger pendingForceClosingChannelsArray_Count;

/** / Channels waiting for closing tx to confirm */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDPendingChannelsResponse_WaitingCloseChannel*> *waitingCloseChannelsArray;
/** The number of items in @c waitingCloseChannelsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger waitingCloseChannelsArray_Count;

@end

#pragma mark - LNDPendingChannelsResponse_PendingChannel

typedef GPB_ENUM(LNDPendingChannelsResponse_PendingChannel_FieldNumber) {
  LNDPendingChannelsResponse_PendingChannel_FieldNumber_RemoteNodePub = 1,
  LNDPendingChannelsResponse_PendingChannel_FieldNumber_ChannelPoint = 2,
  LNDPendingChannelsResponse_PendingChannel_FieldNumber_Capacity = 3,
  LNDPendingChannelsResponse_PendingChannel_FieldNumber_LocalBalance = 4,
  LNDPendingChannelsResponse_PendingChannel_FieldNumber_RemoteBalance = 5,
};

@interface LNDPendingChannelsResponse_PendingChannel : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *remoteNodePub;

@property(nonatomic, readwrite, copy, null_resettable) NSString *channelPoint;

@property(nonatomic, readwrite) int64_t capacity;

@property(nonatomic, readwrite) int64_t localBalance;

@property(nonatomic, readwrite) int64_t remoteBalance;

@end

#pragma mark - LNDPendingChannelsResponse_PendingOpenChannel

typedef GPB_ENUM(LNDPendingChannelsResponse_PendingOpenChannel_FieldNumber) {
  LNDPendingChannelsResponse_PendingOpenChannel_FieldNumber_Channel = 1,
  LNDPendingChannelsResponse_PendingOpenChannel_FieldNumber_ConfirmationHeight = 2,
  LNDPendingChannelsResponse_PendingOpenChannel_FieldNumber_CommitFee = 4,
  LNDPendingChannelsResponse_PendingOpenChannel_FieldNumber_CommitWeight = 5,
  LNDPendingChannelsResponse_PendingOpenChannel_FieldNumber_FeePerKw = 6,
};

@interface LNDPendingChannelsResponse_PendingOpenChannel : GPBMessage

/** / The pending channel */
@property(nonatomic, readwrite, strong, null_resettable) LNDPendingChannelsResponse_PendingChannel *channel;
/** Test to see if @c channel has been set. */
@property(nonatomic, readwrite) BOOL hasChannel;

/** / The height at which this channel will be confirmed */
@property(nonatomic, readwrite) uint32_t confirmationHeight;

/**
 * *
 * The amount calculated to be paid in fees for the current set of
 * commitment transactions. The fee amount is persisted with the channel
 * in order to allow the fee amount to be removed and recalculated with
 * each channel state update, including updates that happen after a system
 * restart.
 **/
@property(nonatomic, readwrite) int64_t commitFee;

/** / The weight of the commitment transaction */
@property(nonatomic, readwrite) int64_t commitWeight;

/**
 * *
 * The required number of satoshis per kilo-weight that the requester will
 * pay at all times, for both the funding transaction and commitment
 * transaction. This value can later be updated once the channel is open.
 **/
@property(nonatomic, readwrite) int64_t feePerKw;

@end

#pragma mark - LNDPendingChannelsResponse_WaitingCloseChannel

typedef GPB_ENUM(LNDPendingChannelsResponse_WaitingCloseChannel_FieldNumber) {
  LNDPendingChannelsResponse_WaitingCloseChannel_FieldNumber_Channel = 1,
  LNDPendingChannelsResponse_WaitingCloseChannel_FieldNumber_LimboBalance = 2,
};

@interface LNDPendingChannelsResponse_WaitingCloseChannel : GPBMessage

/** / The pending channel waiting for closing tx to confirm */
@property(nonatomic, readwrite, strong, null_resettable) LNDPendingChannelsResponse_PendingChannel *channel;
/** Test to see if @c channel has been set. */
@property(nonatomic, readwrite) BOOL hasChannel;

/** / The balance in satoshis encumbered in this channel */
@property(nonatomic, readwrite) int64_t limboBalance;

@end

#pragma mark - LNDPendingChannelsResponse_ClosedChannel

typedef GPB_ENUM(LNDPendingChannelsResponse_ClosedChannel_FieldNumber) {
  LNDPendingChannelsResponse_ClosedChannel_FieldNumber_Channel = 1,
  LNDPendingChannelsResponse_ClosedChannel_FieldNumber_ClosingTxid = 2,
};

@interface LNDPendingChannelsResponse_ClosedChannel : GPBMessage

/** / The pending channel to be closed */
@property(nonatomic, readwrite, strong, null_resettable) LNDPendingChannelsResponse_PendingChannel *channel;
/** Test to see if @c channel has been set. */
@property(nonatomic, readwrite) BOOL hasChannel;

/** / The transaction id of the closing transaction */
@property(nonatomic, readwrite, copy, null_resettable) NSString *closingTxid;

@end

#pragma mark - LNDPendingChannelsResponse_ForceClosedChannel

typedef GPB_ENUM(LNDPendingChannelsResponse_ForceClosedChannel_FieldNumber) {
  LNDPendingChannelsResponse_ForceClosedChannel_FieldNumber_Channel = 1,
  LNDPendingChannelsResponse_ForceClosedChannel_FieldNumber_ClosingTxid = 2,
  LNDPendingChannelsResponse_ForceClosedChannel_FieldNumber_LimboBalance = 3,
  LNDPendingChannelsResponse_ForceClosedChannel_FieldNumber_MaturityHeight = 4,
  LNDPendingChannelsResponse_ForceClosedChannel_FieldNumber_BlocksTilMaturity = 5,
  LNDPendingChannelsResponse_ForceClosedChannel_FieldNumber_RecoveredBalance = 6,
  LNDPendingChannelsResponse_ForceClosedChannel_FieldNumber_PendingHtlcsArray = 8,
};

@interface LNDPendingChannelsResponse_ForceClosedChannel : GPBMessage

/** / The pending channel to be force closed */
@property(nonatomic, readwrite, strong, null_resettable) LNDPendingChannelsResponse_PendingChannel *channel;
/** Test to see if @c channel has been set. */
@property(nonatomic, readwrite) BOOL hasChannel;

/** / The transaction id of the closing transaction */
@property(nonatomic, readwrite, copy, null_resettable) NSString *closingTxid;

/** / The balance in satoshis encumbered in this pending channel */
@property(nonatomic, readwrite) int64_t limboBalance;

/** / The height at which funds can be sweeped into the wallet */
@property(nonatomic, readwrite) uint32_t maturityHeight;

/**
 *
 * Remaining # of blocks until the commitment output can be swept.
 * Negative values indicate how many blocks have passed since becoming
 * mature.
 **/
@property(nonatomic, readwrite) int32_t blocksTilMaturity;

/** / The total value of funds successfully recovered from this channel */
@property(nonatomic, readwrite) int64_t recoveredBalance;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDPendingHTLC*> *pendingHtlcsArray;
/** The number of items in @c pendingHtlcsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger pendingHtlcsArray_Count;

@end

#pragma mark - LNDWalletBalanceRequest

@interface LNDWalletBalanceRequest : GPBMessage

@end

#pragma mark - LNDWalletBalanceResponse

typedef GPB_ENUM(LNDWalletBalanceResponse_FieldNumber) {
  LNDWalletBalanceResponse_FieldNumber_TotalBalance = 1,
  LNDWalletBalanceResponse_FieldNumber_ConfirmedBalance = 2,
  LNDWalletBalanceResponse_FieldNumber_UnconfirmedBalance = 3,
};

@interface LNDWalletBalanceResponse : GPBMessage

/** / The balance of the wallet */
@property(nonatomic, readwrite) int64_t totalBalance;

/** / The confirmed balance of a wallet(with >= 1 confirmations) */
@property(nonatomic, readwrite) int64_t confirmedBalance;

/** / The unconfirmed balance of a wallet(with 0 confirmations) */
@property(nonatomic, readwrite) int64_t unconfirmedBalance;

@end

#pragma mark - LNDChannelBalanceRequest

@interface LNDChannelBalanceRequest : GPBMessage

@end

#pragma mark - LNDChannelBalanceResponse

typedef GPB_ENUM(LNDChannelBalanceResponse_FieldNumber) {
  LNDChannelBalanceResponse_FieldNumber_Balance = 1,
  LNDChannelBalanceResponse_FieldNumber_PendingOpenBalance = 2,
};

@interface LNDChannelBalanceResponse : GPBMessage

/** / Sum of channels balances denominated in satoshis */
@property(nonatomic, readwrite) int64_t balance;

/** / Sum of channels pending balances denominated in satoshis */
@property(nonatomic, readwrite) int64_t pendingOpenBalance;

@end

#pragma mark - LNDQueryRoutesRequest

typedef GPB_ENUM(LNDQueryRoutesRequest_FieldNumber) {
  LNDQueryRoutesRequest_FieldNumber_PubKey = 1,
  LNDQueryRoutesRequest_FieldNumber_Amt = 2,
  LNDQueryRoutesRequest_FieldNumber_NumRoutes = 3,
  LNDQueryRoutesRequest_FieldNumber_FinalCltvDelta = 4,
  LNDQueryRoutesRequest_FieldNumber_FeeLimit = 5,
};

@interface LNDQueryRoutesRequest : GPBMessage

/** / The 33-byte hex-encoded public key for the payment destination */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pubKey;

/** / The amount to send expressed in satoshis */
@property(nonatomic, readwrite) int64_t amt;

/** / The max number of routes to return. */
@property(nonatomic, readwrite) int32_t numRoutes;

/** / An optional CLTV delta from the current height that should be used for the timelock of the final hop */
@property(nonatomic, readwrite) int32_t finalCltvDelta;

/**
 * *
 * The maximum number of satoshis that will be paid as a fee of the payment.
 * This value can be represented either as a percentage of the amount being
 * sent, or as a fixed amount of the maximum fee the user is willing the pay to
 * send the payment.
 **/
@property(nonatomic, readwrite, strong, null_resettable) LNDFeeLimit *feeLimit;
/** Test to see if @c feeLimit has been set. */
@property(nonatomic, readwrite) BOOL hasFeeLimit;

@end

#pragma mark - LNDQueryRoutesResponse

typedef GPB_ENUM(LNDQueryRoutesResponse_FieldNumber) {
  LNDQueryRoutesResponse_FieldNumber_RoutesArray = 1,
};

@interface LNDQueryRoutesResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDRoute*> *routesArray;
/** The number of items in @c routesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger routesArray_Count;

@end

#pragma mark - LNDHop

typedef GPB_ENUM(LNDHop_FieldNumber) {
  LNDHop_FieldNumber_ChanId = 1,
  LNDHop_FieldNumber_ChanCapacity = 2,
  LNDHop_FieldNumber_AmtToForward = 3,
  LNDHop_FieldNumber_Fee = 4,
  LNDHop_FieldNumber_Expiry = 5,
  LNDHop_FieldNumber_AmtToForwardMsat = 6,
  LNDHop_FieldNumber_FeeMsat = 7,
  LNDHop_FieldNumber_PubKey = 8,
};

@interface LNDHop : GPBMessage

/**
 * *
 * The unique channel ID for the channel. The first 3 bytes are the block
 * height, the next 3 the index within the block, and the last 2 bytes are the
 * output index for the channel.
 **/
@property(nonatomic, readwrite) uint64_t chanId;

@property(nonatomic, readwrite) int64_t chanCapacity;

@property(nonatomic, readwrite) int64_t amtToForward DEPRECATED_ATTRIBUTE;

@property(nonatomic, readwrite) int64_t fee DEPRECATED_ATTRIBUTE;

@property(nonatomic, readwrite) uint32_t expiry;

@property(nonatomic, readwrite) int64_t amtToForwardMsat;

@property(nonatomic, readwrite) int64_t feeMsat;

/**
 * *
 * An optional public key of the hop. If the public key is given, the payment
 * can be executed without relying on a copy of the channel graph.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *pubKey;

@end

#pragma mark - LNDRoute

typedef GPB_ENUM(LNDRoute_FieldNumber) {
  LNDRoute_FieldNumber_TotalTimeLock = 1,
  LNDRoute_FieldNumber_TotalFees = 2,
  LNDRoute_FieldNumber_TotalAmt = 3,
  LNDRoute_FieldNumber_HopsArray = 4,
  LNDRoute_FieldNumber_TotalFeesMsat = 5,
  LNDRoute_FieldNumber_TotalAmtMsat = 6,
};

/**
 * *
 * A path through the channel graph which runs over one or more channels in
 * succession. This struct carries all the information required to craft the
 * Sphinx onion packet, and send the payment along the first hop in the path. A
 * route is only selected as valid if all the channels have sufficient capacity to
 * carry the initial payment amount after fees are accounted for.
 **/
@interface LNDRoute : GPBMessage

/**
 * *
 * The cumulative (final) time lock across the entire route.  This is the CLTV
 * value that should be extended to the first hop in the route. All other hops
 * will decrement the time-lock as advertised, leaving enough time for all
 * hops to wait for or present the payment preimage to complete the payment.
 **/
@property(nonatomic, readwrite) uint32_t totalTimeLock;

/**
 * *
 * The sum of the fees paid at each hop within the final route.  In the case
 * of a one-hop payment, this value will be zero as we don't need to pay a fee
 * it ourself.
 **/
@property(nonatomic, readwrite) int64_t totalFees DEPRECATED_ATTRIBUTE;

/**
 * *
 * The total amount of funds required to complete a payment over this route.
 * This value includes the cumulative fees at each hop. As a result, the HTLC
 * extended to the first-hop in the route will need to have at least this many
 * satoshis, otherwise the route will fail at an intermediate node due to an
 * insufficient amount of fees.
 **/
@property(nonatomic, readwrite) int64_t totalAmt DEPRECATED_ATTRIBUTE;

/**
 * *
 * Contains details concerning the specific forwarding details at each hop.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDHop*> *hopsArray;
/** The number of items in @c hopsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger hopsArray_Count;

/**
 * *
 * The total fees in millisatoshis.
 **/
@property(nonatomic, readwrite) int64_t totalFeesMsat;

/**
 * *
 * The total amount in millisatoshis.
 **/
@property(nonatomic, readwrite) int64_t totalAmtMsat;

@end

#pragma mark - LNDNodeInfoRequest

typedef GPB_ENUM(LNDNodeInfoRequest_FieldNumber) {
  LNDNodeInfoRequest_FieldNumber_PubKey = 1,
};

@interface LNDNodeInfoRequest : GPBMessage

/** / The 33-byte hex-encoded compressed public of the target node */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pubKey;

@end

#pragma mark - LNDNodeInfo

typedef GPB_ENUM(LNDNodeInfo_FieldNumber) {
  LNDNodeInfo_FieldNumber_Node = 1,
  LNDNodeInfo_FieldNumber_NumChannels = 2,
  LNDNodeInfo_FieldNumber_TotalCapacity = 3,
};

@interface LNDNodeInfo : GPBMessage

/**
 * *
 * An individual vertex/node within the channel graph. A node is
 * connected to other nodes by one or more channel edges emanating from it. As
 * the graph is directed, a node will also have an incoming edge attached to
 * it for each outgoing edge.
 **/
@property(nonatomic, readwrite, strong, null_resettable) LNDLightningNode *node;
/** Test to see if @c node has been set. */
@property(nonatomic, readwrite) BOOL hasNode;

@property(nonatomic, readwrite) uint32_t numChannels;

@property(nonatomic, readwrite) int64_t totalCapacity;

@end

#pragma mark - LNDLightningNode

typedef GPB_ENUM(LNDLightningNode_FieldNumber) {
  LNDLightningNode_FieldNumber_LastUpdate = 1,
  LNDLightningNode_FieldNumber_PubKey = 2,
  LNDLightningNode_FieldNumber_Alias = 3,
  LNDLightningNode_FieldNumber_AddressesArray = 4,
  LNDLightningNode_FieldNumber_Color = 5,
};

/**
 * *
 * An individual vertex/node within the channel graph. A node is
 * connected to other nodes by one or more channel edges emanating from it. As the
 * graph is directed, a node will also have an incoming edge attached to it for
 * each outgoing edge.
 **/
@interface LNDLightningNode : GPBMessage

@property(nonatomic, readwrite) uint32_t lastUpdate;

@property(nonatomic, readwrite, copy, null_resettable) NSString *pubKey;

@property(nonatomic, readwrite, copy, null_resettable) NSString *alias;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDNodeAddress*> *addressesArray;
/** The number of items in @c addressesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger addressesArray_Count;

@property(nonatomic, readwrite, copy, null_resettable) NSString *color;

@end

#pragma mark - LNDNodeAddress

typedef GPB_ENUM(LNDNodeAddress_FieldNumber) {
  LNDNodeAddress_FieldNumber_Network = 1,
  LNDNodeAddress_FieldNumber_Addr = 2,
};

@interface LNDNodeAddress : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *network;

@property(nonatomic, readwrite, copy, null_resettable) NSString *addr;

@end

#pragma mark - LNDRoutingPolicy

typedef GPB_ENUM(LNDRoutingPolicy_FieldNumber) {
  LNDRoutingPolicy_FieldNumber_TimeLockDelta = 1,
  LNDRoutingPolicy_FieldNumber_MinHtlc = 2,
  LNDRoutingPolicy_FieldNumber_FeeBaseMsat = 3,
  LNDRoutingPolicy_FieldNumber_FeeRateMilliMsat = 4,
  LNDRoutingPolicy_FieldNumber_Disabled = 5,
};

@interface LNDRoutingPolicy : GPBMessage

@property(nonatomic, readwrite) uint32_t timeLockDelta;

@property(nonatomic, readwrite) int64_t minHtlc;

@property(nonatomic, readwrite) int64_t feeBaseMsat;

@property(nonatomic, readwrite) int64_t feeRateMilliMsat;

@property(nonatomic, readwrite) BOOL disabled;

@end

#pragma mark - LNDChannelEdge

typedef GPB_ENUM(LNDChannelEdge_FieldNumber) {
  LNDChannelEdge_FieldNumber_ChannelId = 1,
  LNDChannelEdge_FieldNumber_ChanPoint = 2,
  LNDChannelEdge_FieldNumber_LastUpdate = 3,
  LNDChannelEdge_FieldNumber_Node1Pub = 4,
  LNDChannelEdge_FieldNumber_Node2Pub = 5,
  LNDChannelEdge_FieldNumber_Capacity = 6,
  LNDChannelEdge_FieldNumber_Node1Policy = 7,
  LNDChannelEdge_FieldNumber_Node2Policy = 8,
};

/**
 * *
 * A fully authenticated channel along with all its unique attributes.
 * Once an authenticated channel announcement has been processed on the network,
 * then an instance of ChannelEdgeInfo encapsulating the channels attributes is
 * stored. The other portions relevant to routing policy of a channel are stored
 * within a ChannelEdgePolicy for each direction of the channel.
 **/
@interface LNDChannelEdge : GPBMessage

/**
 * *
 * The unique channel ID for the channel. The first 3 bytes are the block
 * height, the next 3 the index within the block, and the last 2 bytes are the
 * output index for the channel.
 **/
@property(nonatomic, readwrite) uint64_t channelId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *chanPoint;

@property(nonatomic, readwrite) uint32_t lastUpdate;

@property(nonatomic, readwrite, copy, null_resettable) NSString *node1Pub;

@property(nonatomic, readwrite, copy, null_resettable) NSString *node2Pub;

@property(nonatomic, readwrite) int64_t capacity;

@property(nonatomic, readwrite, strong, null_resettable) LNDRoutingPolicy *node1Policy;
/** Test to see if @c node1Policy has been set. */
@property(nonatomic, readwrite) BOOL hasNode1Policy;

@property(nonatomic, readwrite, strong, null_resettable) LNDRoutingPolicy *node2Policy;
/** Test to see if @c node2Policy has been set. */
@property(nonatomic, readwrite) BOOL hasNode2Policy;

@end

#pragma mark - LNDChannelGraphRequest

typedef GPB_ENUM(LNDChannelGraphRequest_FieldNumber) {
  LNDChannelGraphRequest_FieldNumber_IncludeUnannounced = 1,
};

@interface LNDChannelGraphRequest : GPBMessage

/**
 * *
 * Whether unannounced channels are included in the response or not. If set,
 * unannounced channels are included. Unannounced channels are both private
 * channels, and public channels that are not yet announced to the network.
 **/
@property(nonatomic, readwrite) BOOL includeUnannounced;

@end

#pragma mark - LNDChannelGraph

typedef GPB_ENUM(LNDChannelGraph_FieldNumber) {
  LNDChannelGraph_FieldNumber_NodesArray = 1,
  LNDChannelGraph_FieldNumber_EdgesArray = 2,
};

/**
 * / Returns a new instance of the directed channel graph.
 **/
@interface LNDChannelGraph : GPBMessage

/** / The list of `LightningNode`s in this channel graph */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDLightningNode*> *nodesArray;
/** The number of items in @c nodesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger nodesArray_Count;

/** / The list of `ChannelEdge`s in this channel graph */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDChannelEdge*> *edgesArray;
/** The number of items in @c edgesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger edgesArray_Count;

@end

#pragma mark - LNDChanInfoRequest

typedef GPB_ENUM(LNDChanInfoRequest_FieldNumber) {
  LNDChanInfoRequest_FieldNumber_ChanId = 1,
};

@interface LNDChanInfoRequest : GPBMessage

/**
 * *
 * The unique channel ID for the channel. The first 3 bytes are the block
 * height, the next 3 the index within the block, and the last 2 bytes are the
 * output index for the channel.
 **/
@property(nonatomic, readwrite) uint64_t chanId;

@end

#pragma mark - LNDNetworkInfoRequest

@interface LNDNetworkInfoRequest : GPBMessage

@end

#pragma mark - LNDNetworkInfo

typedef GPB_ENUM(LNDNetworkInfo_FieldNumber) {
  LNDNetworkInfo_FieldNumber_GraphDiameter = 1,
  LNDNetworkInfo_FieldNumber_AvgOutDegree = 2,
  LNDNetworkInfo_FieldNumber_MaxOutDegree = 3,
  LNDNetworkInfo_FieldNumber_NumNodes = 4,
  LNDNetworkInfo_FieldNumber_NumChannels = 5,
  LNDNetworkInfo_FieldNumber_TotalNetworkCapacity = 6,
  LNDNetworkInfo_FieldNumber_AvgChannelSize = 7,
  LNDNetworkInfo_FieldNumber_MinChannelSize = 8,
  LNDNetworkInfo_FieldNumber_MaxChannelSize = 9,
};

@interface LNDNetworkInfo : GPBMessage

@property(nonatomic, readwrite) uint32_t graphDiameter;

@property(nonatomic, readwrite) double avgOutDegree;

@property(nonatomic, readwrite) uint32_t maxOutDegree;

@property(nonatomic, readwrite) uint32_t numNodes;

@property(nonatomic, readwrite) uint32_t numChannels;

@property(nonatomic, readwrite) int64_t totalNetworkCapacity;

@property(nonatomic, readwrite) double avgChannelSize;

@property(nonatomic, readwrite) int64_t minChannelSize;

@property(nonatomic, readwrite) int64_t maxChannelSize;

@end

#pragma mark - LNDStopRequest

@interface LNDStopRequest : GPBMessage

@end

#pragma mark - LNDStopResponse

@interface LNDStopResponse : GPBMessage

@end

#pragma mark - LNDGraphTopologySubscription

@interface LNDGraphTopologySubscription : GPBMessage

@end

#pragma mark - LNDGraphTopologyUpdate

typedef GPB_ENUM(LNDGraphTopologyUpdate_FieldNumber) {
  LNDGraphTopologyUpdate_FieldNumber_NodeUpdatesArray = 1,
  LNDGraphTopologyUpdate_FieldNumber_ChannelUpdatesArray = 2,
  LNDGraphTopologyUpdate_FieldNumber_ClosedChansArray = 3,
};

@interface LNDGraphTopologyUpdate : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDNodeUpdate*> *nodeUpdatesArray;
/** The number of items in @c nodeUpdatesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger nodeUpdatesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDChannelEdgeUpdate*> *channelUpdatesArray;
/** The number of items in @c channelUpdatesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger channelUpdatesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDClosedChannelUpdate*> *closedChansArray;
/** The number of items in @c closedChansArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger closedChansArray_Count;

@end

#pragma mark - LNDNodeUpdate

typedef GPB_ENUM(LNDNodeUpdate_FieldNumber) {
  LNDNodeUpdate_FieldNumber_AddressesArray = 1,
  LNDNodeUpdate_FieldNumber_IdentityKey = 2,
  LNDNodeUpdate_FieldNumber_GlobalFeatures = 3,
  LNDNodeUpdate_FieldNumber_Alias = 4,
};

@interface LNDNodeUpdate : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *addressesArray;
/** The number of items in @c addressesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger addressesArray_Count;

@property(nonatomic, readwrite, copy, null_resettable) NSString *identityKey;

@property(nonatomic, readwrite, copy, null_resettable) NSData *globalFeatures;

@property(nonatomic, readwrite, copy, null_resettable) NSString *alias;

@end

#pragma mark - LNDChannelEdgeUpdate

typedef GPB_ENUM(LNDChannelEdgeUpdate_FieldNumber) {
  LNDChannelEdgeUpdate_FieldNumber_ChanId = 1,
  LNDChannelEdgeUpdate_FieldNumber_ChanPoint = 2,
  LNDChannelEdgeUpdate_FieldNumber_Capacity = 3,
  LNDChannelEdgeUpdate_FieldNumber_RoutingPolicy = 4,
  LNDChannelEdgeUpdate_FieldNumber_AdvertisingNode = 5,
  LNDChannelEdgeUpdate_FieldNumber_ConnectingNode = 6,
};

@interface LNDChannelEdgeUpdate : GPBMessage

/**
 * *
 * The unique channel ID for the channel. The first 3 bytes are the block
 * height, the next 3 the index within the block, and the last 2 bytes are the
 * output index for the channel.
 **/
@property(nonatomic, readwrite) uint64_t chanId;

@property(nonatomic, readwrite, strong, null_resettable) LNDChannelPoint *chanPoint;
/** Test to see if @c chanPoint has been set. */
@property(nonatomic, readwrite) BOOL hasChanPoint;

@property(nonatomic, readwrite) int64_t capacity;

@property(nonatomic, readwrite, strong, null_resettable) LNDRoutingPolicy *routingPolicy;
/** Test to see if @c routingPolicy has been set. */
@property(nonatomic, readwrite) BOOL hasRoutingPolicy;

@property(nonatomic, readwrite, copy, null_resettable) NSString *advertisingNode;

@property(nonatomic, readwrite, copy, null_resettable) NSString *connectingNode;

@end

#pragma mark - LNDClosedChannelUpdate

typedef GPB_ENUM(LNDClosedChannelUpdate_FieldNumber) {
  LNDClosedChannelUpdate_FieldNumber_ChanId = 1,
  LNDClosedChannelUpdate_FieldNumber_Capacity = 2,
  LNDClosedChannelUpdate_FieldNumber_ClosedHeight = 3,
  LNDClosedChannelUpdate_FieldNumber_ChanPoint = 4,
};

@interface LNDClosedChannelUpdate : GPBMessage

/**
 * *
 * The unique channel ID for the channel. The first 3 bytes are the block
 * height, the next 3 the index within the block, and the last 2 bytes are the
 * output index for the channel.
 **/
@property(nonatomic, readwrite) uint64_t chanId;

@property(nonatomic, readwrite) int64_t capacity;

@property(nonatomic, readwrite) uint32_t closedHeight;

@property(nonatomic, readwrite, strong, null_resettable) LNDChannelPoint *chanPoint;
/** Test to see if @c chanPoint has been set. */
@property(nonatomic, readwrite) BOOL hasChanPoint;

@end

#pragma mark - LNDHopHint

typedef GPB_ENUM(LNDHopHint_FieldNumber) {
  LNDHopHint_FieldNumber_NodeId = 1,
  LNDHopHint_FieldNumber_ChanId = 2,
  LNDHopHint_FieldNumber_FeeBaseMsat = 3,
  LNDHopHint_FieldNumber_FeeProportionalMillionths = 4,
  LNDHopHint_FieldNumber_CltvExpiryDelta = 5,
};

@interface LNDHopHint : GPBMessage

/** / The public key of the node at the start of the channel. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *nodeId;

/** / The unique identifier of the channel. */
@property(nonatomic, readwrite) uint64_t chanId;

/** / The base fee of the channel denominated in millisatoshis. */
@property(nonatomic, readwrite) uint32_t feeBaseMsat;

/**
 * *
 * The fee rate of the channel for sending one satoshi across it denominated in
 * millionths of a satoshi.
 **/
@property(nonatomic, readwrite) uint32_t feeProportionalMillionths;

/** / The time-lock delta of the channel. */
@property(nonatomic, readwrite) uint32_t cltvExpiryDelta;

@end

#pragma mark - LNDRouteHint

typedef GPB_ENUM(LNDRouteHint_FieldNumber) {
  LNDRouteHint_FieldNumber_HopHintsArray = 1,
};

@interface LNDRouteHint : GPBMessage

/**
 * *
 * A list of hop hints that when chained together can assist in reaching a
 * specific destination.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDHopHint*> *hopHintsArray;
/** The number of items in @c hopHintsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger hopHintsArray_Count;

@end

#pragma mark - LNDInvoice

typedef GPB_ENUM(LNDInvoice_FieldNumber) {
  LNDInvoice_FieldNumber_Memo = 1,
  LNDInvoice_FieldNumber_Receipt = 2,
  LNDInvoice_FieldNumber_RPreimage = 3,
  LNDInvoice_FieldNumber_RHash = 4,
  LNDInvoice_FieldNumber_Value = 5,
  LNDInvoice_FieldNumber_Settled = 6,
  LNDInvoice_FieldNumber_CreationDate = 7,
  LNDInvoice_FieldNumber_SettleDate = 8,
  LNDInvoice_FieldNumber_PaymentRequest = 9,
  LNDInvoice_FieldNumber_DescriptionHash = 10,
  LNDInvoice_FieldNumber_Expiry = 11,
  LNDInvoice_FieldNumber_FallbackAddr = 12,
  LNDInvoice_FieldNumber_CltvExpiry = 13,
  LNDInvoice_FieldNumber_RouteHintsArray = 14,
  LNDInvoice_FieldNumber_Private_p = 15,
  LNDInvoice_FieldNumber_AddIndex = 16,
  LNDInvoice_FieldNumber_SettleIndex = 17,
  LNDInvoice_FieldNumber_AmtPaid = 18,
  LNDInvoice_FieldNumber_AmtPaidSat = 19,
  LNDInvoice_FieldNumber_AmtPaidMsat = 20,
  LNDInvoice_FieldNumber_State = 21,
};

@interface LNDInvoice : GPBMessage

/**
 * *
 * An optional memo to attach along with the invoice. Used for record keeping
 * purposes for the invoice's creator, and will also be set in the description
 * field of the encoded payment request if the description_hash field is not
 * being used.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *memo;

/**
 * * Deprecated. An optional cryptographic receipt of payment which is not
 * implemented.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *receipt DEPRECATED_ATTRIBUTE;

/**
 * *
 * The hex-encoded preimage (32 byte) which will allow settling an incoming
 * HTLC payable to this preimage
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *rPreimage;

/** / The hash of the preimage */
@property(nonatomic, readwrite, copy, null_resettable) NSData *rHash;

/** / The value of this invoice in satoshis */
@property(nonatomic, readwrite) int64_t value;

/** / Whether this invoice has been fulfilled */
@property(nonatomic, readwrite) BOOL settled DEPRECATED_ATTRIBUTE;

/** / When this invoice was created */
@property(nonatomic, readwrite) int64_t creationDate;

/** / When this invoice was settled */
@property(nonatomic, readwrite) int64_t settleDate;

/**
 * *
 * A bare-bones invoice for a payment within the Lightning Network.  With the
 * details of the invoice, the sender has all the data necessary to send a
 * payment to the recipient.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *paymentRequest;

/**
 * *
 * Hash (SHA-256) of a description of the payment. Used if the description of
 * payment (memo) is too long to naturally fit within the description field
 * of an encoded payment request.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *descriptionHash;

/** / Payment request expiry time in seconds. Default is 3600 (1 hour). */
@property(nonatomic, readwrite) int64_t expiry;

/** / Fallback on-chain address. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fallbackAddr;

/** / Delta to use for the time-lock of the CLTV extended to the final hop. */
@property(nonatomic, readwrite) uint64_t cltvExpiry;

/**
 * *
 * Route hints that can each be individually used to assist in reaching the
 * invoice's destination.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDRouteHint*> *routeHintsArray;
/** The number of items in @c routeHintsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger routeHintsArray_Count;

/** / Whether this invoice should include routing hints for private channels. */
@property(nonatomic, readwrite) BOOL private_p;

/**
 * *
 * The "add" index of this invoice. Each newly created invoice will increment
 * this index making it monotonically increasing. Callers to the
 * SubscribeInvoices call can use this to instantly get notified of all added
 * invoices with an add_index greater than this one.
 **/
@property(nonatomic, readwrite) uint64_t addIndex;

/**
 * *
 * The "settle" index of this invoice. Each newly settled invoice will
 * increment this index making it monotonically increasing. Callers to the
 * SubscribeInvoices call can use this to instantly get notified of all
 * settled invoices with an settle_index greater than this one.
 **/
@property(nonatomic, readwrite) uint64_t settleIndex;

/** / Deprecated, use amt_paid_sat or amt_paid_msat. */
@property(nonatomic, readwrite) int64_t amtPaid DEPRECATED_ATTRIBUTE;

/**
 * *
 * The amount that was accepted for this invoice, in satoshis. This will ONLY
 * be set if this invoice has been settled. We provide this field as if the
 * invoice was created with a zero value, then we need to record what amount
 * was ultimately accepted. Additionally, it's possible that the sender paid
 * MORE that was specified in the original invoice. So we'll record that here
 * as well.
 **/
@property(nonatomic, readwrite) int64_t amtPaidSat;

/**
 * *
 * The amount that was accepted for this invoice, in millisatoshis. This will
 * ONLY be set if this invoice has been settled. We provide this field as if
 * the invoice was created with a zero value, then we need to record what
 * amount was ultimately accepted. Additionally, it's possible that the sender
 * paid MORE that was specified in the original invoice. So we'll record that
 * here as well.
 **/
@property(nonatomic, readwrite) int64_t amtPaidMsat;

/**
 * *
 * The state the invoice is in.
 **/
@property(nonatomic, readwrite) LNDInvoice_InvoiceState state;

@end

/**
 * Fetches the raw value of a @c LNDInvoice's @c state property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t LNDInvoice_State_RawValue(LNDInvoice *message);
/**
 * Sets the raw value of an @c LNDInvoice's @c state property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetLNDInvoice_State_RawValue(LNDInvoice *message, int32_t value);

#pragma mark - LNDAddInvoiceResponse

typedef GPB_ENUM(LNDAddInvoiceResponse_FieldNumber) {
  LNDAddInvoiceResponse_FieldNumber_RHash = 1,
  LNDAddInvoiceResponse_FieldNumber_PaymentRequest = 2,
  LNDAddInvoiceResponse_FieldNumber_AddIndex = 16,
};

@interface LNDAddInvoiceResponse : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *rHash;

/**
 * *
 * A bare-bones invoice for a payment within the Lightning Network.  With the
 * details of the invoice, the sender has all the data necessary to send a
 * payment to the recipient.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *paymentRequest;

/**
 * *
 * The "add" index of this invoice. Each newly created invoice will increment
 * this index making it monotonically increasing. Callers to the
 * SubscribeInvoices call can use this to instantly get notified of all added
 * invoices with an add_index greater than this one.
 **/
@property(nonatomic, readwrite) uint64_t addIndex;

@end

#pragma mark - LNDPaymentHash

typedef GPB_ENUM(LNDPaymentHash_FieldNumber) {
  LNDPaymentHash_FieldNumber_RHashStr = 1,
  LNDPaymentHash_FieldNumber_RHash = 2,
};

@interface LNDPaymentHash : GPBMessage

/**
 * *
 * The hex-encoded payment hash of the invoice to be looked up. The passed
 * payment hash must be exactly 32 bytes, otherwise an error is returned.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *rHashStr;

/** / The payment hash of the invoice to be looked up. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *rHash;

@end

#pragma mark - LNDListInvoiceRequest

typedef GPB_ENUM(LNDListInvoiceRequest_FieldNumber) {
  LNDListInvoiceRequest_FieldNumber_PendingOnly = 1,
  LNDListInvoiceRequest_FieldNumber_IndexOffset = 4,
  LNDListInvoiceRequest_FieldNumber_NumMaxInvoices = 5,
  LNDListInvoiceRequest_FieldNumber_Reversed = 6,
};

@interface LNDListInvoiceRequest : GPBMessage

/** / If set, only unsettled invoices will be returned in the response. */
@property(nonatomic, readwrite) BOOL pendingOnly;

/**
 * *
 * The index of an invoice that will be used as either the start or end of a
 * query to determine which invoices should be returned in the response.
 **/
@property(nonatomic, readwrite) uint64_t indexOffset;

/** / The max number of invoices to return in the response to this query. */
@property(nonatomic, readwrite) uint64_t numMaxInvoices;

/**
 * *
 * If set, the invoices returned will result from seeking backwards from the
 * specified index offset. This can be used to paginate backwards.
 **/
@property(nonatomic, readwrite) BOOL reversed;

@end

#pragma mark - LNDListInvoiceResponse

typedef GPB_ENUM(LNDListInvoiceResponse_FieldNumber) {
  LNDListInvoiceResponse_FieldNumber_InvoicesArray = 1,
  LNDListInvoiceResponse_FieldNumber_LastIndexOffset = 2,
  LNDListInvoiceResponse_FieldNumber_FirstIndexOffset = 3,
};

@interface LNDListInvoiceResponse : GPBMessage

/**
 * *
 * A list of invoices from the time slice of the time series specified in the
 * request.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDInvoice*> *invoicesArray;
/** The number of items in @c invoicesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger invoicesArray_Count;

/**
 * *
 * The index of the last item in the set of returned invoices. This can be used
 * to seek further, pagination style.
 **/
@property(nonatomic, readwrite) uint64_t lastIndexOffset;

/**
 * *
 * The index of the last item in the set of returned invoices. This can be used
 * to seek backwards, pagination style.
 **/
@property(nonatomic, readwrite) uint64_t firstIndexOffset;

@end

#pragma mark - LNDInvoiceSubscription

typedef GPB_ENUM(LNDInvoiceSubscription_FieldNumber) {
  LNDInvoiceSubscription_FieldNumber_AddIndex = 1,
  LNDInvoiceSubscription_FieldNumber_SettleIndex = 2,
};

@interface LNDInvoiceSubscription : GPBMessage

/**
 * *
 * If specified (non-zero), then we'll first start by sending out
 * notifications for all added indexes with an add_index greater than this
 * value. This allows callers to catch up on any events they missed while they
 * weren't connected to the streaming RPC.
 **/
@property(nonatomic, readwrite) uint64_t addIndex;

/**
 * *
 * If specified (non-zero), then we'll first start by sending out
 * notifications for all settled indexes with an settle_index greater than
 * this value. This allows callers to catch up on any events they missed while
 * they weren't connected to the streaming RPC.
 **/
@property(nonatomic, readwrite) uint64_t settleIndex;

@end

#pragma mark - LNDPayment

typedef GPB_ENUM(LNDPayment_FieldNumber) {
  LNDPayment_FieldNumber_PaymentHash = 1,
  LNDPayment_FieldNumber_Value = 2,
  LNDPayment_FieldNumber_CreationDate = 3,
  LNDPayment_FieldNumber_PathArray = 4,
  LNDPayment_FieldNumber_Fee = 5,
  LNDPayment_FieldNumber_PaymentPreimage = 6,
  LNDPayment_FieldNumber_ValueSat = 7,
  LNDPayment_FieldNumber_ValueMsat = 8,
};

@interface LNDPayment : GPBMessage

/** / The payment hash */
@property(nonatomic, readwrite, copy, null_resettable) NSString *paymentHash;

/** / Deprecated, use value_sat or value_msat. */
@property(nonatomic, readwrite) int64_t value DEPRECATED_ATTRIBUTE;

/** / The date of this payment */
@property(nonatomic, readwrite) int64_t creationDate;

/** / The path this payment took */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *pathArray;
/** The number of items in @c pathArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger pathArray_Count;

/** / The fee paid for this payment in satoshis */
@property(nonatomic, readwrite) int64_t fee;

/** / The payment preimage */
@property(nonatomic, readwrite, copy, null_resettable) NSString *paymentPreimage;

/** / The value of the payment in satoshis */
@property(nonatomic, readwrite) int64_t valueSat;

/** / The value of the payment in milli-satoshis */
@property(nonatomic, readwrite) int64_t valueMsat;

@end

#pragma mark - LNDListPaymentsRequest

@interface LNDListPaymentsRequest : GPBMessage

@end

#pragma mark - LNDListPaymentsResponse

typedef GPB_ENUM(LNDListPaymentsResponse_FieldNumber) {
  LNDListPaymentsResponse_FieldNumber_PaymentsArray = 1,
};

@interface LNDListPaymentsResponse : GPBMessage

/** / The list of payments */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDPayment*> *paymentsArray;
/** The number of items in @c paymentsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger paymentsArray_Count;

@end

#pragma mark - LNDDeleteAllPaymentsRequest

@interface LNDDeleteAllPaymentsRequest : GPBMessage

@end

#pragma mark - LNDDeleteAllPaymentsResponse

@interface LNDDeleteAllPaymentsResponse : GPBMessage

@end

#pragma mark - LNDAbandonChannelRequest

typedef GPB_ENUM(LNDAbandonChannelRequest_FieldNumber) {
  LNDAbandonChannelRequest_FieldNumber_ChannelPoint = 1,
};

@interface LNDAbandonChannelRequest : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) LNDChannelPoint *channelPoint;
/** Test to see if @c channelPoint has been set. */
@property(nonatomic, readwrite) BOOL hasChannelPoint;

@end

#pragma mark - LNDAbandonChannelResponse

@interface LNDAbandonChannelResponse : GPBMessage

@end

#pragma mark - LNDDebugLevelRequest

typedef GPB_ENUM(LNDDebugLevelRequest_FieldNumber) {
  LNDDebugLevelRequest_FieldNumber_Show = 1,
  LNDDebugLevelRequest_FieldNumber_LevelSpec = 2,
};

@interface LNDDebugLevelRequest : GPBMessage

@property(nonatomic, readwrite) BOOL show;

@property(nonatomic, readwrite, copy, null_resettable) NSString *levelSpec;

@end

#pragma mark - LNDDebugLevelResponse

typedef GPB_ENUM(LNDDebugLevelResponse_FieldNumber) {
  LNDDebugLevelResponse_FieldNumber_SubSystems = 1,
};

@interface LNDDebugLevelResponse : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *subSystems;

@end

#pragma mark - LNDPayReqString

typedef GPB_ENUM(LNDPayReqString_FieldNumber) {
  LNDPayReqString_FieldNumber_PayReq = 1,
};

@interface LNDPayReqString : GPBMessage

/** / The payment request string to be decoded */
@property(nonatomic, readwrite, copy, null_resettable) NSString *payReq;

@end

#pragma mark - LNDPayReq

typedef GPB_ENUM(LNDPayReq_FieldNumber) {
  LNDPayReq_FieldNumber_Destination = 1,
  LNDPayReq_FieldNumber_PaymentHash = 2,
  LNDPayReq_FieldNumber_NumSatoshis = 3,
  LNDPayReq_FieldNumber_Timestamp = 4,
  LNDPayReq_FieldNumber_Expiry = 5,
  LNDPayReq_FieldNumber_Description_p = 6,
  LNDPayReq_FieldNumber_DescriptionHash = 7,
  LNDPayReq_FieldNumber_FallbackAddr = 8,
  LNDPayReq_FieldNumber_CltvExpiry = 9,
  LNDPayReq_FieldNumber_RouteHintsArray = 10,
};

@interface LNDPayReq : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *destination;

@property(nonatomic, readwrite, copy, null_resettable) NSString *paymentHash;

@property(nonatomic, readwrite) int64_t numSatoshis;

@property(nonatomic, readwrite) int64_t timestamp;

@property(nonatomic, readwrite) int64_t expiry;

@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *descriptionHash;

@property(nonatomic, readwrite, copy, null_resettable) NSString *fallbackAddr;

@property(nonatomic, readwrite) int64_t cltvExpiry;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDRouteHint*> *routeHintsArray;
/** The number of items in @c routeHintsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger routeHintsArray_Count;

@end

#pragma mark - LNDFeeReportRequest

@interface LNDFeeReportRequest : GPBMessage

@end

#pragma mark - LNDChannelFeeReport

typedef GPB_ENUM(LNDChannelFeeReport_FieldNumber) {
  LNDChannelFeeReport_FieldNumber_ChanPoint = 1,
  LNDChannelFeeReport_FieldNumber_BaseFeeMsat = 2,
  LNDChannelFeeReport_FieldNumber_FeePerMil = 3,
  LNDChannelFeeReport_FieldNumber_FeeRate = 4,
};

@interface LNDChannelFeeReport : GPBMessage

/** / The channel that this fee report belongs to. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *chanPoint;

/** / The base fee charged regardless of the number of milli-satoshis sent. */
@property(nonatomic, readwrite) int64_t baseFeeMsat;

/** / The amount charged per milli-satoshis transferred expressed in millionths of a satoshi. */
@property(nonatomic, readwrite) int64_t feePerMil;

/** / The effective fee rate in milli-satoshis. Computed by dividing the fee_per_mil value by 1 million. */
@property(nonatomic, readwrite) double feeRate;

@end

#pragma mark - LNDFeeReportResponse

typedef GPB_ENUM(LNDFeeReportResponse_FieldNumber) {
  LNDFeeReportResponse_FieldNumber_ChannelFeesArray = 1,
  LNDFeeReportResponse_FieldNumber_DayFeeSum = 2,
  LNDFeeReportResponse_FieldNumber_WeekFeeSum = 3,
  LNDFeeReportResponse_FieldNumber_MonthFeeSum = 4,
};

@interface LNDFeeReportResponse : GPBMessage

/** / An array of channel fee reports which describes the current fee schedule for each channel. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDChannelFeeReport*> *channelFeesArray;
/** The number of items in @c channelFeesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger channelFeesArray_Count;

/** / The total amount of fee revenue (in satoshis) the switch has collected over the past 24 hrs. */
@property(nonatomic, readwrite) uint64_t dayFeeSum;

/** / The total amount of fee revenue (in satoshis) the switch has collected over the past 1 week. */
@property(nonatomic, readwrite) uint64_t weekFeeSum;

/** / The total amount of fee revenue (in satoshis) the switch has collected over the past 1 month. */
@property(nonatomic, readwrite) uint64_t monthFeeSum;

@end

#pragma mark - LNDPolicyUpdateRequest

typedef GPB_ENUM(LNDPolicyUpdateRequest_FieldNumber) {
  LNDPolicyUpdateRequest_FieldNumber_Global = 1,
  LNDPolicyUpdateRequest_FieldNumber_ChanPoint = 2,
  LNDPolicyUpdateRequest_FieldNumber_BaseFeeMsat = 3,
  LNDPolicyUpdateRequest_FieldNumber_FeeRate = 4,
  LNDPolicyUpdateRequest_FieldNumber_TimeLockDelta = 5,
};

typedef GPB_ENUM(LNDPolicyUpdateRequest_Scope_OneOfCase) {
  LNDPolicyUpdateRequest_Scope_OneOfCase_GPBUnsetOneOfCase = 0,
  LNDPolicyUpdateRequest_Scope_OneOfCase_Global = 1,
  LNDPolicyUpdateRequest_Scope_OneOfCase_ChanPoint = 2,
};

@interface LNDPolicyUpdateRequest : GPBMessage

@property(nonatomic, readonly) LNDPolicyUpdateRequest_Scope_OneOfCase scopeOneOfCase;

/** / If set, then this update applies to all currently active channels. */
@property(nonatomic, readwrite) BOOL global;

/** / If set, this update will target a specific channel. */
@property(nonatomic, readwrite, strong, null_resettable) LNDChannelPoint *chanPoint;

/** / The base fee charged regardless of the number of milli-satoshis sent. */
@property(nonatomic, readwrite) int64_t baseFeeMsat;

/** / The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6. */
@property(nonatomic, readwrite) double feeRate;

/** / The required timelock delta for HTLCs forwarded over the channel. */
@property(nonatomic, readwrite) uint32_t timeLockDelta;

@end

/**
 * Clears whatever value was set for the oneof 'scope'.
 **/
void LNDPolicyUpdateRequest_ClearScopeOneOfCase(LNDPolicyUpdateRequest *message);

#pragma mark - LNDPolicyUpdateResponse

@interface LNDPolicyUpdateResponse : GPBMessage

@end

#pragma mark - LNDForwardingHistoryRequest

typedef GPB_ENUM(LNDForwardingHistoryRequest_FieldNumber) {
  LNDForwardingHistoryRequest_FieldNumber_StartTime = 1,
  LNDForwardingHistoryRequest_FieldNumber_EndTime = 2,
  LNDForwardingHistoryRequest_FieldNumber_IndexOffset = 3,
  LNDForwardingHistoryRequest_FieldNumber_NumMaxEvents = 4,
};

@interface LNDForwardingHistoryRequest : GPBMessage

/** / Start time is the starting point of the forwarding history request. All records beyond this point will be included, respecting the end time, and the index offset. */
@property(nonatomic, readwrite) uint64_t startTime;

/** / End time is the end point of the forwarding history request. The response will carry at most 50k records between the start time and the end time. The index offset can be used to implement pagination. */
@property(nonatomic, readwrite) uint64_t endTime;

/** / Index offset is the offset in the time series to start at. As each response can only contain 50k records, callers can use this to skip around within a packed time series. */
@property(nonatomic, readwrite) uint32_t indexOffset;

/** / The max number of events to return in the response to this query. */
@property(nonatomic, readwrite) uint32_t numMaxEvents;

@end

#pragma mark - LNDForwardingEvent

typedef GPB_ENUM(LNDForwardingEvent_FieldNumber) {
  LNDForwardingEvent_FieldNumber_Timestamp = 1,
  LNDForwardingEvent_FieldNumber_ChanIdIn = 2,
  LNDForwardingEvent_FieldNumber_ChanIdOut = 4,
  LNDForwardingEvent_FieldNumber_AmtIn = 5,
  LNDForwardingEvent_FieldNumber_AmtOut = 6,
  LNDForwardingEvent_FieldNumber_Fee = 7,
  LNDForwardingEvent_FieldNumber_FeeMsat = 8,
};

@interface LNDForwardingEvent : GPBMessage

/** / Timestamp is the time (unix epoch offset) that this circuit was completed. */
@property(nonatomic, readwrite) uint64_t timestamp;

/** / The incoming channel ID that carried the HTLC that created the circuit. */
@property(nonatomic, readwrite) uint64_t chanIdIn;

/** / The outgoing channel ID that carried the preimage that completed the circuit. */
@property(nonatomic, readwrite) uint64_t chanIdOut;

/** / The total amount (in satoshis) of the incoming HTLC that created half the circuit. */
@property(nonatomic, readwrite) uint64_t amtIn;

/** / The total amount (in satoshis) of the outgoing HTLC that created the second half of the circuit. */
@property(nonatomic, readwrite) uint64_t amtOut;

/** / The total fee (in satoshis) that this payment circuit carried. */
@property(nonatomic, readwrite) uint64_t fee;

/** / The total fee (in milli-satoshis) that this payment circuit carried. */
@property(nonatomic, readwrite) uint64_t feeMsat;

@end

#pragma mark - LNDForwardingHistoryResponse

typedef GPB_ENUM(LNDForwardingHistoryResponse_FieldNumber) {
  LNDForwardingHistoryResponse_FieldNumber_ForwardingEventsArray = 1,
  LNDForwardingHistoryResponse_FieldNumber_LastOffsetIndex = 2,
};

@interface LNDForwardingHistoryResponse : GPBMessage

/** / A list of forwarding events from the time slice of the time series specified in the request. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LNDForwardingEvent*> *forwardingEventsArray;
/** The number of items in @c forwardingEventsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger forwardingEventsArray_Count;

/** / The index of the last time in the set of returned forwarding events. Can be used to seek further, pagination style. */
@property(nonatomic, readwrite) uint32_t lastOffsetIndex;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
