// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Macaroon.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Macaroon.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MacaroonRoot

@implementation MacaroonRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MacaroonRoot_FileDescriptor

static GPBFileDescriptor *MacaroonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MacaroonId

@implementation MacaroonId

@dynamic nonce;
@dynamic storageId;
@dynamic opsArray, opsArray_Count;

typedef struct MacaroonId__storage_ {
  uint32_t _has_storage_[1];
  NSData *nonce;
  NSData *storageId;
  NSMutableArray *opsArray;
} MacaroonId__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nonce",
        .dataTypeSpecific.className = NULL,
        .number = MacaroonId_FieldNumber_Nonce,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MacaroonId__storage_, nonce),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "storageId",
        .dataTypeSpecific.className = NULL,
        .number = MacaroonId_FieldNumber_StorageId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MacaroonId__storage_, storageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "opsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Op),
        .number = MacaroonId_FieldNumber_OpsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MacaroonId__storage_, opsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MacaroonId class]
                                     rootClass:[MacaroonRoot class]
                                          file:MacaroonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MacaroonId__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Op

@implementation Op

@dynamic entity;
@dynamic actionsArray, actionsArray_Count;

typedef struct Op__storage_ {
  uint32_t _has_storage_[1];
  NSString *entity;
  NSMutableArray *actionsArray;
} Op__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "entity",
        .dataTypeSpecific.className = NULL,
        .number = Op_FieldNumber_Entity,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Op__storage_, entity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "actionsArray",
        .dataTypeSpecific.className = NULL,
        .number = Op_FieldNumber_ActionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Op__storage_, actionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Op class]
                                     rootClass:[MacaroonRoot class]
                                          file:MacaroonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Op__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
